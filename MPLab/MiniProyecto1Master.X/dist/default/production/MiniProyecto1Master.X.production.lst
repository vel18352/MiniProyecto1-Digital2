

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 12:04:08 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=4
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=4
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  008F                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  0105                     	;# 
   129  0107                     	;# 
   130  0108                     	;# 
   131  0109                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0185                     	;# 
   138  0187                     	;# 
   139  0188                     	;# 
   140  0189                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0088                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  009F                     	;# 
   206  0105                     	;# 
   207  0107                     	;# 
   208  0108                     	;# 
   209  0109                     	;# 
   210  010C                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0187                     	;# 
   217  0188                     	;# 
   218  0189                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000D                     	;# 
   313  000E                     	;# 
   314  000E                     	;# 
   315  000F                     	;# 
   316  0010                     	;# 
   317  0011                     	;# 
   318  0012                     	;# 
   319  0013                     	;# 
   320  0014                     	;# 
   321  0015                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001B                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  001D                     	;# 
   332  001E                     	;# 
   333  001F                     	;# 
   334  0081                     	;# 
   335  0085                     	;# 
   336  0086                     	;# 
   337  0087                     	;# 
   338  0088                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377                           
   378                           	psect	strings
   379  0400                     __pstrings:
   380  0400                     stringtab:
   381  0400                     __stringtab:
   382                           
   383                           ;	String table - string pointers are 1 byte each
   384  0400  1BFF               	btfsc	btemp+1,7
   385  0401  2C0A               	ljmp	stringcode
   386  0402  1383               	bcf	3,7
   387  0403  187F               	btfsc	btemp+1,0
   388  0404  1783               	bsf	3,7
   389  0405  0800               	movf	0,w
   390  0406  0A84               	incf	4,f
   391  0407  1903               	skipnz
   392  0408  0AFF               	incf	btemp+1,f
   393  0409  0008               	return
   394  040A                     stringcode:
   395  040A                     stringdir:
   396  040A  3004               	movlw	high stringdir
   397  040B  008A               	movwf	10
   398  040C  0804               	movf	4,w
   399  040D  0A84               	incf	4,f
   400  040E  0782               	addwf	2,f
   401  040F                     __stringbase:
   402  040F  3400               	retlw	0
   403  0410                     __end_of__stringtab:
   404  0410                     _dpowers:
   405  0410  3401               	retlw	1
   406  0411  3400               	retlw	0
   407  0412  340A               	retlw	10
   408  0413  3400               	retlw	0
   409  0414  3464               	retlw	100
   410  0415  3400               	retlw	0
   411  0416  34E8               	retlw	232
   412  0417  3403               	retlw	3
   413  0418  3410               	retlw	16
   414  0419  3427               	retlw	39
   415  041A                     __end_of_dpowers:
   416  0009                     _PORTEbits	set	9
   417  0014                     _SSPCON	set	20
   418  0005                     _PORTAbits	set	5
   419  0013                     _SSPBUF	set	19
   420  000C                     _PIR1bits	set	12
   421  0009                     _PORTE	set	9
   422  0008                     _PORTD	set	8
   423  0006                     _PORTB	set	6
   424  0005                     _PORTA	set	5
   425  0019                     _TXREG	set	25
   426  00C4                     _CREN	set	196
   427  00C7                     _SPEN	set	199
   428  0063                     _SSPIF	set	99
   429  0094                     _SSPSTAT	set	148
   430  0098                     _TXSTAbits	set	152
   431  0099                     _SPBRG	set	153
   432  008C                     _PIE1bits	set	140
   433  0089                     _TRISE	set	137
   434  0088                     _TRISD	set	136
   435  0087                     _TRISCbits	set	135
   436  0086                     _TRISB	set	134
   437  0085                     _TRISA	set	133
   438  043B                     _TRISC3	set	1083
   439  043D                     _TRISC5	set	1085
   440  04C5                     _TXEN	set	1221
   441  043E                     _TRISC6	set	1086
   442  043F                     _TRISC7	set	1087
   443  04C4                     _SYNC	set	1220
   444  04C2                     _BRGH	set	1218
   445  0189                     _ANSELH	set	393
   446  0188                     _ANSEL	set	392
   447  041A                     STR_1:
   448  041A  3450               	retlw	80	;'P'
   449  041B  346F               	retlw	111	;'o'
   450  041C  3474               	retlw	116	;'t'
   451  041D  3420               	retlw	32	;' '
   452  041E  3420               	retlw	32	;' '
   453  041F  3443               	retlw	67	;'C'
   454  0420  346F               	retlw	111	;'o'
   455  0421  346E               	retlw	110	;'n'
   456  0422  3474               	retlw	116	;'t'
   457  0423  3420               	retlw	32	;' '
   458  0424  3420               	retlw	32	;' '
   459  0425  3454               	retlw	84	;'T'
   460  0426  3465               	retlw	101	;'e'
   461  0427  346D               	retlw	109	;'m'
   462  0428  3470               	retlw	112	;'p'
   463  0429  3400               	retlw	0
   464  042A                     STR_7:
   465  042A  3420               	retlw	32	;' '
   466  042B  3420               	retlw	32	;' '
   467  042C  3420               	retlw	32	;' '
   468  042D  3420               	retlw	32	;' '
   469  042E  3400               	retlw	0
   470  042F                     STR_2:
   471  042F  3425               	retlw	37	;'%'
   472  0430  3464               	retlw	100	;'d'
   473  0431  3400               	retlw	0
   474  042B                     
   475                           	psect	cinit
   476  000F                     start_initialization:	
   477                           ; #config settings
   478                           
   479  000F                     __initialization:
   480                           
   481                           ; Clear objects allocated to COMMON
   482  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   483                           
   484                           ; Clear objects allocated to BANK0
   485  0010  1383               	bcf	3,7	;select IRP bank0
   486  0011  3020               	movlw	low __pbssBANK0
   487  0012  0084               	movwf	4
   488  0013  304A               	movlw	low (__pbssBANK0+42)
   489  0014  120A  118A  24F6  120A  118A  	fcall	clear_ram0
   490  0019                     end_of_initialization:	
   491                           ;End of C runtime variable initialization code
   492                           
   493  0019                     __end_of__initialization:
   494  0019  0183               	clrf	3
   495  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   496                           
   497                           	psect	bssCOMMON
   498  007A                     __pbssCOMMON:
   499  007A                     _Test1:
   500  007A                     	ds	1
   501                           
   502                           	psect	bssBANK0
   503  0020                     __pbssBANK0:
   504  0020                     _str:
   505  0020                     	ds	20
   506  0034                     _SPI_slave_3:
   507  0034                     	ds	1
   508  0035                     _SPI_slave_2:
   509  0035                     	ds	1
   510  0036                     _SPI_slave_1:
   511  0036                     	ds	1
   512  0037                     _slave_select:
   513  0037                     	ds	1
   514  0038                     _slave_3:
   515  0038                     	ds	6
   516  003E                     _slave_2:
   517  003E                     	ds	6
   518  0044                     _slave_1:
   519  0044                     	ds	6
   520                           
   521                           	psect	clrtext
   522  04F6                     clear_ram0:	
   523                           ;	Called with FSR containing the base address, and
   524                           ;	W with the last address+1
   525                           
   526  04F6  0064               	clrwdt	;clear the watchdog before getting into this loop
   527  04F7                     clrloop0:
   528  04F7  0180               	clrf	0	;clear RAM location pointed to by FSR
   529  04F8  0A84               	incf	4,f	;increment pointer
   530  04F9  0604               	xorwf	4,w	;XOR with final address
   531  04FA  1903               	btfsc	3,2	;have we reached the end yet?
   532  04FB  3400               	retlw	0	;all done for this memory range, return
   533  04FC  0604               	xorwf	4,w	;XOR again to restore value
   534  04FD  2CF7               	goto	clrloop0	;do the next byte
   535                           
   536                           	psect	cstackCOMMON
   537  0070                     __pcstackCOMMON:
   538  0070                     ?_lcd_init:
   539  0070                     ?_lcd_cmd:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ?_init_UART:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ?_lcd_clear:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ?_lcd_port:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ?_Text_Uart:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ?_setup:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_isr:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ??_isr:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_main:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_lcd_write_char:	
   567                           ; 1 bytes @ 0x0
   568                           
   569                           
   570                           ; 1 bytes @ 0x0
   571  0070                     	ds	3
   572  0073                     ??_init_UART:
   573  0073                     ?_spiInit:	
   574                           ; 1 bytes @ 0x3
   575                           
   576  0073                     ??_lcd_port:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0073                     ??_Text_Uart:	
   580                           ; 1 bytes @ 0x3
   581                           
   582  0073                     ?___lwdiv:	
   583                           ; 1 bytes @ 0x3
   584                           
   585  0073                     spiInit@sDataSample:	
   586                           ; 2 bytes @ 0x3
   587                           
   588  0073                     lcd_port@a:	
   589                           ; 1 bytes @ 0x3
   590                           
   591  0073                     ___lwdiv@divisor:	
   592                           ; 1 bytes @ 0x3
   593                           
   594                           
   595                           ; 2 bytes @ 0x3
   596  0073                     	ds	1
   597  0074                     ??_lcd_cmd:
   598  0074                     ??_lcd_write_char:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0074                     spiInit@sClockIdle:	
   602                           ; 1 bytes @ 0x4
   603                           
   604                           
   605                           ; 1 bytes @ 0x4
   606  0074                     	ds	1
   607  0075                     spiInit@sTransmitEdge:
   608  0075                     Text_Uart@i:	
   609                           ; 1 bytes @ 0x5
   610                           
   611  0075                     ___lwdiv@dividend:	
   612                           ; 2 bytes @ 0x5
   613                           
   614                           
   615                           ; 2 bytes @ 0x5
   616  0075                     	ds	1
   617  0076                     ??_spiInit:
   618  0076                     spiInit@sType:	
   619                           ; 1 bytes @ 0x6
   620                           
   621  0076                     lcd_cmd@cmd:	
   622                           ; 1 bytes @ 0x6
   623                           
   624  0076                     lcd_write_char@data:	
   625                           ; 1 bytes @ 0x6
   626                           
   627                           
   628                           ; 1 bytes @ 0x6
   629  0076                     	ds	1
   630  0077                     ??_lcd_init:
   631  0077                     ??_lcd_clear:	
   632                           ; 1 bytes @ 0x7
   633                           
   634  0077                     ?_lcd_write_string:	
   635                           ; 1 bytes @ 0x7
   636                           
   637  0077                     ?_lcd_move_cursor:	
   638                           ; 1 bytes @ 0x7
   639                           
   640  0077                     ??___lwdiv:	
   641                           ; 1 bytes @ 0x7
   642                           
   643  0077                     Text_Uart@text:	
   644                           ; 1 bytes @ 0x7
   645                           
   646  0077                     lcd_move_cursor@col:	
   647                           ; 1 bytes @ 0x7
   648                           
   649  0077                     lcd_write_string@a:	
   650                           ; 1 bytes @ 0x7
   651                           
   652                           
   653                           ; 2 bytes @ 0x7
   654  0077                     	ds	1
   655  0078                     ??_lcd_move_cursor:
   656  0078                     ??___lwmod:	
   657                           ; 1 bytes @ 0x8
   658                           
   659  0078                     lcd_move_cursor@row:	
   660                           ; 1 bytes @ 0x8
   661                           
   662                           
   663                           ; 1 bytes @ 0x8
   664  0078                     	ds	1
   665  0079                     ??_setup:
   666  0079                     ___lwmod@counter:	
   667                           ; 1 bytes @ 0x9
   668                           
   669                           
   670                           ; 1 bytes @ 0x9
   671  0079                     	ds	1
   672                           
   673                           	psect	cstackBANK0
   674  004A                     __pcstackBANK0:
   675  004A                     ??_lcd_write_string:
   676  004A                     ___lwdiv@counter:	
   677                           ; 1 bytes @ 0x0
   678                           
   679                           
   680                           ; 1 bytes @ 0x0
   681  004A                     	ds	1
   682  004B                     ___lwdiv@quotient:
   683                           
   684                           ; 2 bytes @ 0x1
   685  004B                     	ds	2
   686  004D                     ?___lwmod:
   687  004D                     lcd_write_string@i:	
   688                           ; 2 bytes @ 0x3
   689                           
   690  004D                     ___lwmod@divisor:	
   691                           ; 2 bytes @ 0x3
   692                           
   693                           
   694                           ; 2 bytes @ 0x3
   695  004D                     	ds	2
   696  004F                     ___lwmod@dividend:
   697                           
   698                           ; 2 bytes @ 0x5
   699  004F                     	ds	2
   700  0051                     ?_sprintf:
   701  0051                     sprintf@f:	
   702                           ; 2 bytes @ 0x7
   703                           
   704                           
   705                           ; 1 bytes @ 0x7
   706  0051                     	ds	3
   707  0054                     ??_sprintf:
   708                           
   709                           ; 1 bytes @ 0xA
   710  0054                     	ds	3
   711  0057                     sprintf@ap:
   712                           
   713                           ; 1 bytes @ 0xD
   714  0057                     	ds	1
   715  0058                     sprintf@flag:
   716                           
   717                           ; 1 bytes @ 0xE
   718  0058                     	ds	1
   719  0059                     sprintf@prec:
   720                           
   721                           ; 1 bytes @ 0xF
   722  0059                     	ds	1
   723  005A                     sprintf@val:
   724                           
   725                           ; 2 bytes @ 0x10
   726  005A                     	ds	2
   727  005C                     sprintf@sp:
   728                           
   729                           ; 1 bytes @ 0x12
   730  005C                     	ds	1
   731  005D                     sprintf@c:
   732                           
   733                           ; 1 bytes @ 0x13
   734  005D                     	ds	1
   735  005E                     ??_main:
   736                           
   737                           ; 1 bytes @ 0x14
   738  005E                     	ds	3
   739                           
   740                           	psect	maintext
   741  001D                     __pmaintext:	
   742 ;;
   743 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   744 ;;
   745 ;; *************** function _main *****************
   746 ;; Defined at:
   747 ;;		line 91 in file "Main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;		None
   750 ;; Auto vars:     Size  Location     Type
   751 ;;		None
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : B00/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         0       0       0       0       0
   762 ;;      Locals:         0       0       0       0       0
   763 ;;      Temps:          0       3       0       0       0
   764 ;;      Totals:         0       3       0       0       0
   765 ;;Total ram usage:        3 bytes
   766 ;; Hardware stack levels required when called:    5
   767 ;; This function calls:
   768 ;;		_Text_Uart
   769 ;;		_lcd_clear
   770 ;;		_lcd_move_cursor
   771 ;;		_lcd_write_string
   772 ;;		_setup
   773 ;;		_sprintf
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           
   780                           ;psect for function _main
   781  001D                     _main:
   782  001D                     l1702:	
   783                           ;incstack = 0
   784                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   785                           
   786                           
   787                           ;Main.c: 92:     setup();
   788  001D  120A  118A  23AE  120A  118A  	fcall	_setup
   789  0022                     l108:	
   790                           ;Main.c: 94:     while (1) {
   791                           
   792                           
   793                           ;Main.c: 95:         lcd_clear();
   794  0022  120A  118A  24E9  120A  118A  	fcall	_lcd_clear
   795  0027                     l1704:
   796                           
   797                           ;Main.c: 97:         if (slave_select == 2) {
   798  0027  3002               	movlw	2
   799  0028  1283               	bcf	3,5	;RP0=0, select bank0
   800  0029  1303               	bcf	3,6	;RP1=0, select bank0
   801  002A  0637               	xorwf	_slave_select,w
   802  002B  1D03               	btfss	3,2
   803  002C  282E               	goto	u871
   804  002D  282F               	goto	u870
   805  002E                     u871:
   806  002E  2848               	goto	l1718
   807  002F                     u870:
   808  002F                     l1706:
   809                           
   810                           ;Main.c: 98:             PORTAbits.RA0 = 0;
   811  002F  1005               	bcf	5,0	;volatile
   812                           
   813                           ;Main.c: 99:             PORTAbits.RA1 = 1;
   814  0030  1485               	bsf	5,1	;volatile
   815                           
   816                           ;Main.c: 100:             PORTAbits.RA2 = 1;
   817  0031  1505               	bsf	5,2	;volatile
   818  0032                     l1708:
   819                           
   820                           ;Main.c: 101:             SSPBUF = 0xFF;
   821  0032  30FF               	movlw	255
   822  0033  0093               	movwf	19	;volatile
   823                           
   824                           ;Main.c: 102:             _delay((unsigned long)((10)*(4000000/4000.0)));
   825  0034  300D               	movlw	13
   826  0035  1283               	bcf	3,5	;RP0=0, select bank0
   827  0036  1303               	bcf	3,6	;RP1=0, select bank0
   828  0037  00DF               	movwf	??_main+1
   829  0038  30FB               	movlw	251
   830  0039  00DE               	movwf	??_main
   831  003A                     u907:
   832  003A  0BDE               	decfsz	??_main,f
   833  003B  283A               	goto	u907
   834  003C  0BDF               	decfsz	??_main+1,f
   835  003D  283A               	goto	u907
   836                           
   837                           ;Main.c: 103:             SPI_slave_1 = SSPBUF;
   838  003E  1283               	bcf	3,5	;RP0=0, select bank0
   839  003F  1303               	bcf	3,6	;RP1=0, select bank0
   840  0040  0813               	movf	19,w	;volatile
   841  0041  00DE               	movwf	??_main
   842  0042  085E               	movf	??_main,w
   843  0043  00B6               	movwf	_SPI_slave_1
   844  0044                     l1710:
   845                           
   846                           ;Main.c: 104:             PORTAbits.RA0 = 1;
   847  0044  1405               	bsf	5,0	;volatile
   848  0045                     l1712:
   849                           
   850                           ;Main.c: 105:             PORTAbits.RA1 = 1;
   851  0045  1485               	bsf	5,1	;volatile
   852  0046                     l1714:
   853                           
   854                           ;Main.c: 106:             PORTAbits.RA2 = 1;
   855  0046  1505               	bsf	5,2	;volatile
   856  0047                     l1716:
   857                           
   858                           ;Main.c: 107:             slave_select = 0;
   859  0047  01B7               	clrf	_slave_select
   860  0048                     l1718:
   861                           
   862                           ;Main.c: 110:         if (slave_select == 1) {
   863  0048  0337               	decf	_slave_select,w
   864  0049  1D03               	btfss	3,2
   865  004A  284C               	goto	u881
   866  004B  284D               	goto	u880
   867  004C                     u881:
   868  004C  2869               	goto	l1732
   869  004D                     u880:
   870  004D                     l1720:
   871                           
   872                           ;Main.c: 111:             PORTAbits.RA0 = 1;
   873  004D  1405               	bsf	5,0	;volatile
   874                           
   875                           ;Main.c: 112:             PORTAbits.RA1 = 0;
   876  004E  1085               	bcf	5,1	;volatile
   877                           
   878                           ;Main.c: 113:             PORTAbits.RA2 = 1;
   879  004F  1505               	bsf	5,2	;volatile
   880  0050                     l1722:
   881                           
   882                           ;Main.c: 114:             SSPBUF = 0x0F;
   883  0050  300F               	movlw	15
   884  0051  0093               	movwf	19	;volatile
   885                           
   886                           ;Main.c: 115:             _delay((unsigned long)((10)*(4000000/4000.0)));
   887  0052  300D               	movlw	13
   888  0053  1283               	bcf	3,5	;RP0=0, select bank0
   889  0054  1303               	bcf	3,6	;RP1=0, select bank0
   890  0055  00DF               	movwf	??_main+1
   891  0056  30FB               	movlw	251
   892  0057  00DE               	movwf	??_main
   893  0058                     u917:
   894  0058  0BDE               	decfsz	??_main,f
   895  0059  2858               	goto	u917
   896  005A  0BDF               	decfsz	??_main+1,f
   897  005B  2858               	goto	u917
   898                           
   899                           ;Main.c: 116:             SPI_slave_2 = SSPBUF;
   900  005C  1283               	bcf	3,5	;RP0=0, select bank0
   901  005D  1303               	bcf	3,6	;RP1=0, select bank0
   902  005E  0813               	movf	19,w	;volatile
   903  005F  00DE               	movwf	??_main
   904  0060  085E               	movf	??_main,w
   905  0061  00B5               	movwf	_SPI_slave_2
   906  0062                     l1724:
   907                           
   908                           ;Main.c: 117:             PORTAbits.RA0 = 1;
   909  0062  1405               	bsf	5,0	;volatile
   910  0063                     l1726:
   911                           
   912                           ;Main.c: 118:             PORTAbits.RA1 = 1;
   913  0063  1485               	bsf	5,1	;volatile
   914  0064                     l1728:
   915                           
   916                           ;Main.c: 119:             PORTAbits.RA2 = 1;
   917  0064  1505               	bsf	5,2	;volatile
   918  0065                     l1730:
   919                           
   920                           ;Main.c: 120:             slave_select++;
   921  0065  3001               	movlw	1
   922  0066  00DE               	movwf	??_main
   923  0067  085E               	movf	??_main,w
   924  0068  07B7               	addwf	_slave_select,f
   925  0069                     l1732:
   926                           
   927                           ;Main.c: 123:         if (slave_select == 0) {
   928  0069  0837               	movf	_slave_select,w
   929  006A  1D03               	btfss	3,2
   930  006B  286D               	goto	u891
   931  006C  286E               	goto	u890
   932  006D                     u891:
   933  006D  288A               	goto	l1746
   934  006E                     u890:
   935  006E                     l1734:
   936                           
   937                           ;Main.c: 124:             PORTAbits.RA0 = 1;
   938  006E  1405               	bsf	5,0	;volatile
   939                           
   940                           ;Main.c: 125:             PORTAbits.RA1 = 1;
   941  006F  1485               	bsf	5,1	;volatile
   942                           
   943                           ;Main.c: 126:             PORTAbits.RA2 = 0;
   944  0070  1105               	bcf	5,2	;volatile
   945  0071                     l1736:
   946                           
   947                           ;Main.c: 127:             SSPBUF = 0xFC;
   948  0071  30FC               	movlw	252
   949  0072  0093               	movwf	19	;volatile
   950                           
   951                           ;Main.c: 128:             _delay((unsigned long)((10)*(4000000/4000.0)));
   952  0073  300D               	movlw	13
   953  0074  1283               	bcf	3,5	;RP0=0, select bank0
   954  0075  1303               	bcf	3,6	;RP1=0, select bank0
   955  0076  00DF               	movwf	??_main+1
   956  0077  30FB               	movlw	251
   957  0078  00DE               	movwf	??_main
   958  0079                     u927:
   959  0079  0BDE               	decfsz	??_main,f
   960  007A  2879               	goto	u927
   961  007B  0BDF               	decfsz	??_main+1,f
   962  007C  2879               	goto	u927
   963                           
   964                           ;Main.c: 129:             SPI_slave_3 = SSPBUF;
   965  007D  1283               	bcf	3,5	;RP0=0, select bank0
   966  007E  1303               	bcf	3,6	;RP1=0, select bank0
   967  007F  0813               	movf	19,w	;volatile
   968  0080  00DE               	movwf	??_main
   969  0081  085E               	movf	??_main,w
   970  0082  00B4               	movwf	_SPI_slave_3
   971  0083                     l1738:
   972                           
   973                           ;Main.c: 130:             PORTAbits.RA0 = 1;
   974  0083  1405               	bsf	5,0	;volatile
   975  0084                     l1740:
   976                           
   977                           ;Main.c: 131:             PORTAbits.RA1 = 1;
   978  0084  1485               	bsf	5,1	;volatile
   979  0085                     l1742:
   980                           
   981                           ;Main.c: 132:             PORTAbits.RA2 = 1;
   982  0085  1505               	bsf	5,2	;volatile
   983  0086                     l1744:
   984                           
   985                           ;Main.c: 133:             slave_select++;
   986  0086  3001               	movlw	1
   987  0087  00DE               	movwf	??_main
   988  0088  085E               	movf	??_main,w
   989  0089  07B7               	addwf	_slave_select,f
   990  008A                     l1746:
   991                           
   992                           ;Main.c: 136:         lcd_write_string("Pot  Cont  Temp");
   993  008A  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   994  008B  00F7               	movwf	lcd_write_string@a
   995  008C  3080               	movlw	128
   996  008D  00F8               	movwf	lcd_write_string@a+1
   997  008E  120A  118A  232C  120A  118A  	fcall	_lcd_write_string
   998  0093                     l1748:
   999                           
  1000                           ;Main.c: 137:         lcd_move_cursor(1, 0);
  1001  0093  01F7               	clrf	lcd_move_cursor@col
  1002  0094  3001               	movlw	1
  1003  0095  120A  118A  245D  120A  118A  	fcall	_lcd_move_cursor
  1004  009A                     l1750:
  1005                           
  1006                           ;Main.c: 138:         sprintf(slave_1, "%d", SPI_slave_1);
  1007  009A  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1008  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1009  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1010  009D  00DE               	movwf	??_main
  1011  009E  085E               	movf	??_main,w
  1012  009F  00D1               	movwf	sprintf@f
  1013  00A0  0836               	movf	_SPI_slave_1,w
  1014  00A1  00DF               	movwf	??_main+1
  1015  00A2  01E0               	clrf	??_main+2
  1016  00A3  085F               	movf	??_main+1,w
  1017  00A4  00D2               	movwf	?_sprintf+1
  1018  00A5  0860               	movf	??_main+2,w
  1019  00A6  00D3               	movwf	?_sprintf+2
  1020  00A7  3044               	movlw	(low (_slave_1| 0))& (0+255)
  1021  00A8  120A  118A  21AB  120A  118A  	fcall	_sprintf
  1022  00AD                     l1752:
  1023                           
  1024                           ;Main.c: 139:         lcd_write_string(slave_1);
  1025  00AD  3044               	movlw	(low (_slave_1| 0))& (0+255)
  1026  00AE  00F7               	movwf	lcd_write_string@a
  1027  00AF  3000               	movlw	0
  1028  00B0  00F8               	movwf	lcd_write_string@a+1
  1029  00B1  120A  118A  232C  120A  118A  	fcall	_lcd_write_string
  1030  00B6                     l1754:
  1031                           
  1032                           ;Main.c: 140:         lcd_move_cursor(1, 6);
  1033  00B6  3006               	movlw	6
  1034  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1035  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1036  00B9  00DE               	movwf	??_main
  1037  00BA  085E               	movf	??_main,w
  1038  00BB  00F7               	movwf	lcd_move_cursor@col
  1039  00BC  3001               	movlw	1
  1040  00BD  120A  118A  245D  120A  118A  	fcall	_lcd_move_cursor
  1041  00C2                     l1756:
  1042                           
  1043                           ;Main.c: 141:         sprintf(slave_2, "%d", SPI_slave_2);
  1044  00C2  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1045  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  1046  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  1047  00C5  00DE               	movwf	??_main
  1048  00C6  085E               	movf	??_main,w
  1049  00C7  00D1               	movwf	sprintf@f
  1050  00C8  0835               	movf	_SPI_slave_2,w
  1051  00C9  00DF               	movwf	??_main+1
  1052  00CA  01E0               	clrf	??_main+2
  1053  00CB  085F               	movf	??_main+1,w
  1054  00CC  00D2               	movwf	?_sprintf+1
  1055  00CD  0860               	movf	??_main+2,w
  1056  00CE  00D3               	movwf	?_sprintf+2
  1057  00CF  303E               	movlw	(low (_slave_2| 0))& (0+255)
  1058  00D0  120A  118A  21AB  120A  118A  	fcall	_sprintf
  1059  00D5                     l1758:
  1060                           
  1061                           ;Main.c: 142:         lcd_write_string(slave_2);
  1062  00D5  303E               	movlw	(low (_slave_2| 0))& (0+255)
  1063  00D6  00F7               	movwf	lcd_write_string@a
  1064  00D7  3000               	movlw	0
  1065  00D8  00F8               	movwf	lcd_write_string@a+1
  1066  00D9  120A  118A  232C  120A  118A  	fcall	_lcd_write_string
  1067  00DE                     l1760:
  1068                           
  1069                           ;Main.c: 143:         lcd_move_cursor(1, 11);
  1070  00DE  300B               	movlw	11
  1071  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1072  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  1073  00E1  00DE               	movwf	??_main
  1074  00E2  085E               	movf	??_main,w
  1075  00E3  00F7               	movwf	lcd_move_cursor@col
  1076  00E4  3001               	movlw	1
  1077  00E5  120A  118A  245D  120A  118A  	fcall	_lcd_move_cursor
  1078  00EA                     l1762:
  1079                           
  1080                           ;Main.c: 144:         sprintf(slave_3, "%d", SPI_slave_3);
  1081  00EA  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1082  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1083  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1084  00ED  00DE               	movwf	??_main
  1085  00EE  085E               	movf	??_main,w
  1086  00EF  00D1               	movwf	sprintf@f
  1087  00F0  0834               	movf	_SPI_slave_3,w
  1088  00F1  00DF               	movwf	??_main+1
  1089  00F2  01E0               	clrf	??_main+2
  1090  00F3  085F               	movf	??_main+1,w
  1091  00F4  00D2               	movwf	?_sprintf+1
  1092  00F5  0860               	movf	??_main+2,w
  1093  00F6  00D3               	movwf	?_sprintf+2
  1094  00F7  3038               	movlw	(low (_slave_3| 0))& (0+255)
  1095  00F8  120A  118A  21AB  120A  118A  	fcall	_sprintf
  1096  00FD                     l1764:
  1097                           
  1098                           ;Main.c: 145:         lcd_write_string(slave_3);
  1099  00FD  3038               	movlw	(low (_slave_3| 0))& (0+255)
  1100  00FE  00F7               	movwf	lcd_write_string@a
  1101  00FF  3000               	movlw	0
  1102  0100  00F8               	movwf	lcd_write_string@a+1
  1103  0101  120A  118A  232C  120A  118A  	fcall	_lcd_write_string
  1104  0106                     l1766:
  1105                           
  1106                           ;Main.c: 147:         Text_Uart("Pot  Cont  Temp");
  1107  0106  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1108  0107  120A  118A  2432  120A  118A  	fcall	_Text_Uart
  1109  010C                     l1768:
  1110                           
  1111                           ;Main.c: 148:         TXREG = (0x0d);
  1112  010C  300D               	movlw	13
  1113  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1114  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1115  010F  0099               	movwf	25	;volatile
  1116  0110                     l1770:
  1117                           
  1118                           ;Main.c: 150:         TXREG = (slave_1[0]);
  1119  0110  0844               	movf	_slave_1,w
  1120  0111  0099               	movwf	25	;volatile
  1121  0112                     l1772:
  1122                           
  1123                           ;Main.c: 151:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1124  0112  3007               	movlw	7
  1125  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0115  00DF               	movwf	??_main+1
  1128  0116  307C               	movlw	124
  1129  0117  00DE               	movwf	??_main
  1130  0118                     u937:
  1131  0118  0BDE               	decfsz	??_main,f
  1132  0119  2918               	goto	u937
  1133  011A  0BDF               	decfsz	??_main+1,f
  1134  011B  2918               	goto	u937
  1135  011C  0000               	nop
  1136  011D                     l1774:
  1137                           
  1138                           ;Main.c: 152:         TXREG = (slave_1[1]);
  1139  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1140  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1141  011F  0845               	movf	_slave_1+1,w
  1142  0120  0099               	movwf	25	;volatile
  1143  0121                     l1776:
  1144                           
  1145                           ;Main.c: 153:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1146  0121  3007               	movlw	7
  1147  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0124  00DF               	movwf	??_main+1
  1150  0125  307C               	movlw	124
  1151  0126  00DE               	movwf	??_main
  1152  0127                     u947:
  1153  0127  0BDE               	decfsz	??_main,f
  1154  0128  2927               	goto	u947
  1155  0129  0BDF               	decfsz	??_main+1,f
  1156  012A  2927               	goto	u947
  1157  012B  0000               	nop
  1158  012C                     l1778:
  1159                           
  1160                           ;Main.c: 154:         TXREG = (slave_1[2]);
  1161  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1162  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1163  012E  0846               	movf	_slave_1+2,w
  1164  012F  0099               	movwf	25	;volatile
  1165  0130                     l1780:
  1166                           
  1167                           ;Main.c: 155:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1168  0130  3007               	movlw	7
  1169  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1170  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1171  0133  00DF               	movwf	??_main+1
  1172  0134  307C               	movlw	124
  1173  0135  00DE               	movwf	??_main
  1174  0136                     u957:
  1175  0136  0BDE               	decfsz	??_main,f
  1176  0137  2936               	goto	u957
  1177  0138  0BDF               	decfsz	??_main+1,f
  1178  0139  2936               	goto	u957
  1179  013A  0000               	nop
  1180  013B                     l1782:
  1181                           
  1182                           ;Main.c: 156:         Text_Uart("   ");
  1183  013B  301C               	movlw	(low (((STR_7+1)-__stringbase)| (0+32768)))& (0+255)
  1184  013C  120A  118A  2432  120A  118A  	fcall	_Text_Uart
  1185  0141                     l1784:
  1186                           
  1187                           ;Main.c: 158:         TXREG = (slave_2[0]);
  1188  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0143  083E               	movf	_slave_2,w
  1191  0144  0099               	movwf	25	;volatile
  1192  0145                     l1786:
  1193                           
  1194                           ;Main.c: 159:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1195  0145  3007               	movlw	7
  1196  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1198  0148  00DF               	movwf	??_main+1
  1199  0149  307C               	movlw	124
  1200  014A  00DE               	movwf	??_main
  1201  014B                     u967:
  1202  014B  0BDE               	decfsz	??_main,f
  1203  014C  294B               	goto	u967
  1204  014D  0BDF               	decfsz	??_main+1,f
  1205  014E  294B               	goto	u967
  1206  014F  0000               	nop
  1207  0150                     l1788:
  1208                           
  1209                           ;Main.c: 160:         TXREG = (slave_2[1]);
  1210  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0152  083F               	movf	_slave_2+1,w
  1213  0153  0099               	movwf	25	;volatile
  1214  0154                     l1790:
  1215                           
  1216                           ;Main.c: 161:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1217  0154  3007               	movlw	7
  1218  0155  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0156  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0157  00DF               	movwf	??_main+1
  1221  0158  307C               	movlw	124
  1222  0159  00DE               	movwf	??_main
  1223  015A                     u977:
  1224  015A  0BDE               	decfsz	??_main,f
  1225  015B  295A               	goto	u977
  1226  015C  0BDF               	decfsz	??_main+1,f
  1227  015D  295A               	goto	u977
  1228  015E  0000               	nop
  1229  015F                     l1792:
  1230                           
  1231                           ;Main.c: 162:         TXREG = (slave_2[2]);
  1232  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1233  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1234  0161  0840               	movf	_slave_2+2,w
  1235  0162  0099               	movwf	25	;volatile
  1236  0163                     l1794:
  1237                           
  1238                           ;Main.c: 163:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1239  0163  3007               	movlw	7
  1240  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0166  00DF               	movwf	??_main+1
  1243  0167  307C               	movlw	124
  1244  0168  00DE               	movwf	??_main
  1245  0169                     u987:
  1246  0169  0BDE               	decfsz	??_main,f
  1247  016A  2969               	goto	u987
  1248  016B  0BDF               	decfsz	??_main+1,f
  1249  016C  2969               	goto	u987
  1250  016D  0000               	nop
  1251  016E                     l1796:
  1252                           
  1253                           ;Main.c: 164:         Text_Uart("    ");
  1254  016E  301B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1255  016F  120A  118A  2432  120A  118A  	fcall	_Text_Uart
  1256  0174                     l1798:
  1257                           
  1258                           ;Main.c: 166:         TXREG = (slave_3[0]);
  1259  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0176  0838               	movf	_slave_3,w
  1262  0177  0099               	movwf	25	;volatile
  1263  0178                     l1800:
  1264                           
  1265                           ;Main.c: 167:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1266  0178  3007               	movlw	7
  1267  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1268  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1269  017B  00DF               	movwf	??_main+1
  1270  017C  307C               	movlw	124
  1271  017D  00DE               	movwf	??_main
  1272  017E                     u997:
  1273  017E  0BDE               	decfsz	??_main,f
  1274  017F  297E               	goto	u997
  1275  0180  0BDF               	decfsz	??_main+1,f
  1276  0181  297E               	goto	u997
  1277  0182  0000               	nop
  1278  0183                     l1802:
  1279                           
  1280                           ;Main.c: 168:         TXREG = (slave_3[1]);
  1281  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0185  0839               	movf	_slave_3+1,w
  1284  0186  0099               	movwf	25	;volatile
  1285  0187                     l1804:
  1286                           
  1287                           ;Main.c: 169:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1288  0187  3007               	movlw	7
  1289  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1291  018A  00DF               	movwf	??_main+1
  1292  018B  307C               	movlw	124
  1293  018C  00DE               	movwf	??_main
  1294  018D                     u1007:
  1295  018D  0BDE               	decfsz	??_main,f
  1296  018E  298D               	goto	u1007
  1297  018F  0BDF               	decfsz	??_main+1,f
  1298  0190  298D               	goto	u1007
  1299  0191  0000               	nop
  1300  0192                     l1806:
  1301                           
  1302                           ;Main.c: 170:         TXREG = (slave_3[2]);
  1303  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1304  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1305  0194  083A               	movf	_slave_3+2,w
  1306  0195  0099               	movwf	25	;volatile
  1307  0196                     l1808:
  1308                           
  1309                           ;Main.c: 171:         _delay((unsigned long)((5)*(4000000/4000.0)));
  1310  0196  3007               	movlw	7
  1311  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0199  00DF               	movwf	??_main+1
  1314  019A  307C               	movlw	124
  1315  019B  00DE               	movwf	??_main
  1316  019C                     u1017:
  1317  019C  0BDE               	decfsz	??_main,f
  1318  019D  299C               	goto	u1017
  1319  019E  0BDF               	decfsz	??_main+1,f
  1320  019F  299C               	goto	u1017
  1321  01A0  0000               	nop
  1322  01A1                     l1810:
  1323                           
  1324                           ;Main.c: 172:         TXREG = (' ');
  1325  01A1  3020               	movlw	32
  1326  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1327  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1328  01A4  0099               	movwf	25	;volatile
  1329  01A5                     l1812:
  1330                           
  1331                           ;Main.c: 173:         TXREG = (0x0d);
  1332  01A5  300D               	movlw	13
  1333  01A6  0099               	movwf	25	;volatile
  1334  01A7  2822               	goto	l108
  1335  01A8  120A  118A  280C   	ljmp	start
  1336  01AB                     __end_of_main:
  1337                           
  1338                           	psect	text1
  1339  01AB                     __ptext1:	
  1340 ;; *************** function _sprintf *****************
  1341 ;; Defined at:
  1342 ;;		line 505 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  sp              1    wreg     PTR unsigned char 
  1345 ;;		 -> slave_3(6), slave_2(6), slave_1(6), 
  1346 ;;  f               1    7[BANK0 ] PTR const unsigned char 
  1347 ;;		 -> STR_4(3), STR_3(3), STR_2(3), 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  sp              1   18[BANK0 ] PTR unsigned char 
  1350 ;;		 -> slave_3(6), slave_2(6), slave_1(6), 
  1351 ;;  tmpval          4    0        struct .
  1352 ;;  val             2   16[BANK0 ] unsigned int 
  1353 ;;  cp              2    0        PTR const unsigned char 
  1354 ;;  len             2    0        unsigned int 
  1355 ;;  c               1   19[BANK0 ] unsigned char 
  1356 ;;  prec            1   15[BANK0 ] char 
  1357 ;;  flag            1   14[BANK0 ] unsigned char 
  1358 ;;  ap              1   13[BANK0 ] PTR void [1]
  1359 ;;		 -> ?_sprintf(2), 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  2    7[BANK0 ] int 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       3       0       0       0
  1370 ;;      Locals:         0       7       0       0       0
  1371 ;;      Temps:          0       3       0       0       0
  1372 ;;      Totals:         0      13       0       0       0
  1373 ;;Total ram usage:       13 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    2
  1376 ;; This function calls:
  1377 ;;		___lwdiv
  1378 ;;		___lwmod
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           
  1385                           ;psect for function _sprintf
  1386  01AB                     _sprintf:
  1387                           
  1388                           ;incstack = 0
  1389                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1390                           ;sprintf@sp stored from wreg
  1391  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1392  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1393  01AD  00DC               	movwf	sprintf@sp
  1394  01AE                     l1640:
  1395                           
  1396                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1397  01AE  3052               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1398  01AF  00D4               	movwf	??_sprintf
  1399  01B0  0854               	movf	??_sprintf,w
  1400  01B1  00D7               	movwf	sprintf@ap
  1401                           
  1402                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1403  01B2  2A7E               	goto	l1692
  1404  01B3                     l1642:
  1405                           
  1406                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1407  01B3  3025               	movlw	37
  1408  01B4  065D               	xorwf	sprintf@c,w
  1409  01B5  1903               	btfsc	3,2
  1410  01B6  29B8               	goto	u801
  1411  01B7  29B9               	goto	u800
  1412  01B8                     u801:
  1413  01B8  29C5               	goto	l1648
  1414  01B9                     u800:
  1415  01B9                     l1644:
  1416                           
  1417                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;D:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1418  01B9  085D               	movf	sprintf@c,w
  1419  01BA  00D4               	movwf	??_sprintf
  1420  01BB  085C               	movf	sprintf@sp,w
  1421  01BC  0084               	movwf	4
  1422  01BD  0854               	movf	??_sprintf,w
  1423  01BE  1383               	bcf	3,7	;select IRP bank0
  1424  01BF  0080               	movwf	0
  1425  01C0                     l1646:
  1426  01C0  3001               	movlw	1
  1427  01C1  00D4               	movwf	??_sprintf
  1428  01C2  0854               	movf	??_sprintf,w
  1429  01C3  07DC               	addwf	sprintf@sp,f
  1430                           
  1431                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1432  01C4  2A7E               	goto	l1692
  1433  01C5                     l1648:
  1434                           
  1435                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1436  01C5  01D8               	clrf	sprintf@flag
  1437  01C6                     l1652:	
  1438                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1439                           
  1440  01C6  3001               	movlw	1
  1441  01C7  07D1               	addwf	sprintf@f,f
  1442  01C8  30FF               	movlw	-1
  1443  01C9  0751               	addwf	sprintf@f,w
  1444  01CA  0084               	movwf	4
  1445  01CB  120A  118A  240A  120A  118A  	fcall	stringdir
  1446  01D0  00DD               	movwf	sprintf@c
  1447  01D1  00D4               	movwf	??_sprintf
  1448  01D2  01D5               	clrf	??_sprintf+1
  1449                           
  1450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1451                           ; Switch size 1, requested type "simple"
  1452                           ; Number of cases is 1, Range of values is 0 to 0
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte            4     3 (average)
  1456                           ; direct_byte           11     8 (fixed)
  1457                           ; jumptable            260     6 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  01D3  0855               	movf	??_sprintf+1,w
  1460  01D4  3A00               	xorlw	0	; case 0
  1461  01D5  1903               	skipnz
  1462  01D6  29D8               	goto	l1834
  1463  01D7  2A7E               	goto	l1692
  1464  01D8                     l1834:
  1465                           
  1466                           ; Switch size 1, requested type "simple"
  1467                           ; Number of cases is 3, Range of values is 0 to 105
  1468                           ; switch strategies available:
  1469                           ; Name         Instructions Cycles
  1470                           ; simple_byte           10     6 (average)
  1471                           ; jumptable            260     6 (fixed)
  1472                           ;	Chosen strategy is simple_byte
  1473  01D8  0854               	movf	??_sprintf,w
  1474  01D9  3A00               	xorlw	0	; case 0
  1475  01DA  1903               	skipnz
  1476  01DB  2A90               	goto	l1694
  1477  01DC  3A64               	xorlw	100	; case 100
  1478  01DD  1903               	skipnz
  1479  01DE  29E3               	goto	l1654
  1480  01DF  3A0D               	xorlw	13	; case 105
  1481  01E0  1903               	skipnz
  1482  01E1  29E3               	goto	l1654
  1483  01E2  2A7E               	goto	l1692
  1484  01E3                     l1654:
  1485                           
  1486                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1487  01E3  0857               	movf	sprintf@ap,w
  1488  01E4  0084               	movwf	4
  1489  01E5  1383               	bcf	3,7	;select IRP bank0
  1490  01E6  0800               	movf	0,w
  1491  01E7  00DA               	movwf	sprintf@val
  1492  01E8  0A84               	incf	4,f
  1493  01E9  0800               	movf	0,w
  1494  01EA  00DB               	movwf	sprintf@val+1
  1495  01EB                     l1656:
  1496  01EB  3002               	movlw	2
  1497  01EC  00D4               	movwf	??_sprintf
  1498  01ED  0854               	movf	??_sprintf,w
  1499  01EE  07D7               	addwf	sprintf@ap,f
  1500  01EF                     l1658:
  1501                           
  1502                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1503  01EF  1FDB               	btfss	sprintf@val+1,7
  1504  01F0  29F2               	goto	u811
  1505  01F1  29F3               	goto	u810
  1506  01F2                     u811:
  1507  01F2  29FC               	goto	l1664
  1508  01F3                     u810:
  1509  01F3                     l1660:
  1510                           
  1511                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1512  01F3  3003               	movlw	3
  1513  01F4  00D4               	movwf	??_sprintf
  1514  01F5  0854               	movf	??_sprintf,w
  1515  01F6  04D8               	iorwf	sprintf@flag,f
  1516  01F7                     l1662:
  1517                           
  1518                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1519  01F7  09DA               	comf	sprintf@val,f
  1520  01F8  09DB               	comf	sprintf@val+1,f
  1521  01F9  0ADA               	incf	sprintf@val,f
  1522  01FA  1903               	skipnz
  1523  01FB  0ADB               	incf	sprintf@val+1,f
  1524  01FC                     l1664:
  1525                           
  1526                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1527  01FC  01DD               	clrf	sprintf@c
  1528  01FD  0ADD               	incf	sprintf@c,f
  1529  01FE                     l1670:
  1530                           
  1531                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1532  01FE  085D               	movf	sprintf@c,w
  1533  01FF  00D4               	movwf	??_sprintf
  1534  0200  0754               	addwf	??_sprintf,w
  1535  0201  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1536  0202  0084               	movwf	4
  1537  0203  120A  118A  240A  120A  118A  	fcall	stringdir
  1538  0208  00D5               	movwf	??_sprintf+1
  1539  0209  120A  118A  240A  120A  118A  	fcall	stringdir
  1540  020E  00D6               	movwf	??_sprintf+2
  1541  020F  0856               	movf	??_sprintf+2,w
  1542  0210  025B               	subwf	sprintf@val+1,w
  1543  0211  1D03               	skipz
  1544  0212  2A15               	goto	u825
  1545  0213  0855               	movf	??_sprintf+1,w
  1546  0214  025A               	subwf	sprintf@val,w
  1547  0215                     u825:
  1548  0215  1803               	skipnc
  1549  0216  2A18               	goto	u821
  1550  0217  2A19               	goto	u820
  1551  0218                     u821:
  1552  0218  2A1A               	goto	l1674
  1553  0219                     u820:
  1554  0219  2A24               	goto	l1676
  1555  021A                     l1674:
  1556  021A  3001               	movlw	1
  1557  021B  00D4               	movwf	??_sprintf
  1558  021C  0854               	movf	??_sprintf,w
  1559  021D  07DD               	addwf	sprintf@c,f
  1560  021E  3005               	movlw	5
  1561  021F  065D               	xorwf	sprintf@c,w
  1562  0220  1D03               	btfss	3,2
  1563  0221  2A23               	goto	u831
  1564  0222  2A24               	goto	u830
  1565  0223                     u831:
  1566  0223  29FE               	goto	l1670
  1567  0224                     u830:
  1568  0224                     l1676:
  1569                           
  1570                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1571  0224  0858               	movf	sprintf@flag,w
  1572  0225  3903               	andlw	3
  1573  0226  1903               	btfsc	3,2
  1574  0227  2A29               	goto	u841
  1575  0228  2A2A               	goto	u840
  1576  0229                     u841:
  1577  0229  2A35               	goto	l1682
  1578  022A                     u840:
  1579  022A                     l1678:
  1580                           
  1581                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1582  022A  302D               	movlw	45
  1583  022B  00D4               	movwf	??_sprintf
  1584  022C  085C               	movf	sprintf@sp,w
  1585  022D  0084               	movwf	4
  1586  022E  0854               	movf	??_sprintf,w
  1587  022F  1383               	bcf	3,7	;select IRP bank0
  1588  0230  0080               	movwf	0
  1589  0231                     l1680:
  1590  0231  3001               	movlw	1
  1591  0232  00D4               	movwf	??_sprintf
  1592  0233  0854               	movf	??_sprintf,w
  1593  0234  07DC               	addwf	sprintf@sp,f
  1594  0235                     l1682:
  1595                           
  1596                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1597  0235  085D               	movf	sprintf@c,w
  1598  0236  00D4               	movwf	??_sprintf
  1599  0237  0854               	movf	??_sprintf,w
  1600  0238  00D9               	movwf	sprintf@prec
  1601                           
  1602                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1603  0239  2A75               	goto	l1690
  1604  023A                     l1684:
  1605                           
  1606                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;D:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1607  023A  300A               	movlw	10
  1608  023B  00CD               	movwf	___lwmod@divisor
  1609  023C  3000               	movlw	0
  1610  023D  00CE               	movwf	___lwmod@divisor+1
  1611  023E  0859               	movf	sprintf@prec,w
  1612  023F  00D4               	movwf	??_sprintf
  1613  0240  0754               	addwf	??_sprintf,w
  1614  0241  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1615  0242  0084               	movwf	4
  1616  0243  120A  118A  240A  120A  118A  	fcall	stringdir
  1617  0248  00F3               	movwf	___lwdiv@divisor
  1618  0249  120A  118A  240A  120A  118A  	fcall	stringdir
  1619  024E  00F4               	movwf	___lwdiv@divisor+1
  1620  024F  085B               	movf	sprintf@val+1,w
  1621  0250  00F6               	movwf	___lwdiv@dividend+1
  1622  0251  085A               	movf	sprintf@val,w
  1623  0252  00F5               	movwf	___lwdiv@dividend
  1624  0253  120A  118A  22E6  120A  118A  	fcall	___lwdiv
  1625  0258  0874               	movf	?___lwdiv+1,w
  1626  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1627  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1628  025B  00D0               	movwf	___lwmod@dividend+1
  1629  025C  0873               	movf	?___lwdiv,w
  1630  025D  00CF               	movwf	___lwmod@dividend
  1631  025E  120A  118A  2372  120A  118A  	fcall	___lwmod
  1632  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0265  084D               	movf	?___lwmod,w
  1635  0266  3E30               	addlw	48
  1636  0267  00D5               	movwf	??_sprintf+1
  1637  0268  0855               	movf	??_sprintf+1,w
  1638  0269  00DD               	movwf	sprintf@c
  1639  026A                     l1686:
  1640                           
  1641                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };D:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1642  026A  085D               	movf	sprintf@c,w
  1643  026B  00D4               	movwf	??_sprintf
  1644  026C  085C               	movf	sprintf@sp,w
  1645  026D  0084               	movwf	4
  1646  026E  0854               	movf	??_sprintf,w
  1647  026F  1383               	bcf	3,7	;select IRP bank0
  1648  0270  0080               	movwf	0
  1649  0271                     l1688:
  1650  0271  3001               	movlw	1
  1651  0272  00D4               	movwf	??_sprintf
  1652  0273  0854               	movf	??_sprintf,w
  1653  0274  07DC               	addwf	sprintf@sp,f
  1654  0275                     l1690:
  1655                           
  1656                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1657  0275  30FF               	movlw	255
  1658  0276  00D4               	movwf	??_sprintf
  1659  0277  0854               	movf	??_sprintf,w
  1660  0278  07D9               	addwf	sprintf@prec,f
  1661  0279  0A59               	incf	sprintf@prec,w
  1662  027A  1D03               	btfss	3,2
  1663  027B  2A7D               	goto	u851
  1664  027C  2A7E               	goto	u850
  1665  027D                     u851:
  1666  027D  2A3A               	goto	l1684
  1667  027E                     u850:
  1668  027E                     l1692:
  1669                           
  1670                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1671  027E  3001               	movlw	1
  1672  027F  07D1               	addwf	sprintf@f,f
  1673  0280  30FF               	movlw	-1
  1674  0281  0751               	addwf	sprintf@f,w
  1675  0282  0084               	movwf	4
  1676  0283  120A  118A  240A  120A  118A  	fcall	stringdir
  1677  0288  00D4               	movwf	??_sprintf
  1678  0289  0854               	movf	??_sprintf,w
  1679  028A  00DD               	movwf	sprintf@c
  1680  028B  085D               	movf	sprintf@c,w
  1681  028C  1D03               	btfss	3,2
  1682  028D  2A8F               	goto	u861
  1683  028E  2A90               	goto	u860
  1684  028F                     u861:
  1685  028F  29B3               	goto	l1642
  1686  0290                     u860:
  1687  0290                     l1694:
  1688                           
  1689                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1690  0290  085C               	movf	sprintf@sp,w
  1691  0291  0084               	movwf	4
  1692  0292  1383               	bcf	3,7	;select IRP bank0
  1693  0293  0180               	clrf	0
  1694  0294                     l304:
  1695  0294  0008               	return
  1696  0295                     __end_of_sprintf:
  1697                           
  1698                           	psect	text2
  1699  0372                     __ptext2:	
  1700 ;; *************** function ___lwmod *****************
  1701 ;; Defined at:
  1702 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  divisor         2    3[BANK0 ] unsigned int 
  1705 ;;  dividend        2    5[BANK0 ] unsigned int 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  counter         1    9[COMMON] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  2    3[BANK0 ] unsigned int 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         0       4       0       0       0
  1718 ;;      Locals:         1       0       0       0       0
  1719 ;;      Temps:          1       0       0       0       0
  1720 ;;      Totals:         2       4       0       0       0
  1721 ;;Total ram usage:        6 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_sprintf
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function ___lwmod
  1733  0372                     ___lwmod:
  1734  0372                     l1578:	
  1735                           ;incstack = 0
  1736                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1737                           
  1738  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0373  1303               	bcf	3,6	;RP1=0, select bank0
  1740  0374  084D               	movf	___lwmod@divisor,w
  1741  0375  044E               	iorwf	___lwmod@divisor+1,w
  1742  0376  1903               	btfsc	3,2
  1743  0377  2B79               	goto	u691
  1744  0378  2B7A               	goto	u690
  1745  0379                     u691:
  1746  0379  2BA9               	goto	l1596
  1747  037A                     u690:
  1748  037A                     l1580:
  1749  037A  01F9               	clrf	___lwmod@counter
  1750  037B  0AF9               	incf	___lwmod@counter,f
  1751  037C  2B88               	goto	l1586
  1752  037D                     l1582:
  1753  037D  3001               	movlw	1
  1754  037E                     u705:
  1755  037E  1003               	clrc
  1756  037F  0DCD               	rlf	___lwmod@divisor,f
  1757  0380  0DCE               	rlf	___lwmod@divisor+1,f
  1758  0381  3EFF               	addlw	-1
  1759  0382  1D03               	skipz
  1760  0383  2B7E               	goto	u705
  1761  0384                     l1584:
  1762  0384  3001               	movlw	1
  1763  0385  00F8               	movwf	??___lwmod
  1764  0386  0878               	movf	??___lwmod,w
  1765  0387  07F9               	addwf	___lwmod@counter,f
  1766  0388                     l1586:
  1767  0388  1FCE               	btfss	___lwmod@divisor+1,7
  1768  0389  2B8B               	goto	u711
  1769  038A  2B8C               	goto	u710
  1770  038B                     u711:
  1771  038B  2B7D               	goto	l1582
  1772  038C                     u710:
  1773  038C                     l1588:
  1774  038C  084E               	movf	___lwmod@divisor+1,w
  1775  038D  0250               	subwf	___lwmod@dividend+1,w
  1776  038E  1D03               	skipz
  1777  038F  2B92               	goto	u725
  1778  0390  084D               	movf	___lwmod@divisor,w
  1779  0391  024F               	subwf	___lwmod@dividend,w
  1780  0392                     u725:
  1781  0392  1C03               	skipc
  1782  0393  2B95               	goto	u721
  1783  0394  2B96               	goto	u720
  1784  0395                     u721:
  1785  0395  2B9C               	goto	l1592
  1786  0396                     u720:
  1787  0396                     l1590:
  1788  0396  084D               	movf	___lwmod@divisor,w
  1789  0397  02CF               	subwf	___lwmod@dividend,f
  1790  0398  084E               	movf	___lwmod@divisor+1,w
  1791  0399  1C03               	skipc
  1792  039A  03D0               	decf	___lwmod@dividend+1,f
  1793  039B  02D0               	subwf	___lwmod@dividend+1,f
  1794  039C                     l1592:
  1795  039C  3001               	movlw	1
  1796  039D                     u735:
  1797  039D  1003               	clrc
  1798  039E  0CCE               	rrf	___lwmod@divisor+1,f
  1799  039F  0CCD               	rrf	___lwmod@divisor,f
  1800  03A0  3EFF               	addlw	-1
  1801  03A1  1D03               	skipz
  1802  03A2  2B9D               	goto	u735
  1803  03A3                     l1594:
  1804  03A3  3001               	movlw	1
  1805  03A4  02F9               	subwf	___lwmod@counter,f
  1806  03A5  1D03               	btfss	3,2
  1807  03A6  2BA8               	goto	u741
  1808  03A7  2BA9               	goto	u740
  1809  03A8                     u741:
  1810  03A8  2B8C               	goto	l1588
  1811  03A9                     u740:
  1812  03A9                     l1596:
  1813  03A9  0850               	movf	___lwmod@dividend+1,w
  1814  03AA  00CE               	movwf	?___lwmod+1
  1815  03AB  084F               	movf	___lwmod@dividend,w
  1816  03AC  00CD               	movwf	?___lwmod
  1817  03AD                     l590:
  1818  03AD  0008               	return
  1819  03AE                     __end_of___lwmod:
  1820                           
  1821                           	psect	text3
  1822  02E6                     __ptext3:	
  1823 ;; *************** function ___lwdiv *****************
  1824 ;; Defined at:
  1825 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  divisor         2    3[COMMON] unsigned int 
  1828 ;;  dividend        2    5[COMMON] unsigned int 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  quotient        2    1[BANK0 ] unsigned int 
  1831 ;;  counter         1    0[BANK0 ] unsigned char 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  2    3[COMMON] unsigned int 
  1834 ;; Registers used:
  1835 ;;		wreg, status,2, status,0
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1841 ;;      Params:         4       0       0       0       0
  1842 ;;      Locals:         0       3       0       0       0
  1843 ;;      Temps:          1       0       0       0       0
  1844 ;;      Totals:         5       3       0       0       0
  1845 ;;Total ram usage:        8 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_sprintf
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function ___lwdiv
  1857  02E6                     ___lwdiv:
  1858  02E6                     l1552:	
  1859                           ;incstack = 0
  1860                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1861                           
  1862  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1863  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1864  02E8  01CB               	clrf	___lwdiv@quotient
  1865  02E9  01CC               	clrf	___lwdiv@quotient+1
  1866  02EA                     l1554:
  1867  02EA  0873               	movf	___lwdiv@divisor,w
  1868  02EB  0474               	iorwf	___lwdiv@divisor+1,w
  1869  02EC  1903               	btfsc	3,2
  1870  02ED  2AEF               	goto	u621
  1871  02EE  2AF0               	goto	u620
  1872  02EF                     u621:
  1873  02EF  2B27               	goto	l1574
  1874  02F0                     u620:
  1875  02F0                     l1556:
  1876  02F0  01CA               	clrf	___lwdiv@counter
  1877  02F1  0ACA               	incf	___lwdiv@counter,f
  1878  02F2  2AFE               	goto	l1562
  1879  02F3                     l1558:
  1880  02F3  3001               	movlw	1
  1881  02F4                     u635:
  1882  02F4  1003               	clrc
  1883  02F5  0DF3               	rlf	___lwdiv@divisor,f
  1884  02F6  0DF4               	rlf	___lwdiv@divisor+1,f
  1885  02F7  3EFF               	addlw	-1
  1886  02F8  1D03               	skipz
  1887  02F9  2AF4               	goto	u635
  1888  02FA                     l1560:
  1889  02FA  3001               	movlw	1
  1890  02FB  00F7               	movwf	??___lwdiv
  1891  02FC  0877               	movf	??___lwdiv,w
  1892  02FD  07CA               	addwf	___lwdiv@counter,f
  1893  02FE                     l1562:
  1894  02FE  1FF4               	btfss	___lwdiv@divisor+1,7
  1895  02FF  2B01               	goto	u641
  1896  0300  2B02               	goto	u640
  1897  0301                     u641:
  1898  0301  2AF3               	goto	l1558
  1899  0302                     u640:
  1900  0302                     l1564:
  1901  0302  3001               	movlw	1
  1902  0303                     u655:
  1903  0303  1003               	clrc
  1904  0304  0DCB               	rlf	___lwdiv@quotient,f
  1905  0305  0DCC               	rlf	___lwdiv@quotient+1,f
  1906  0306  3EFF               	addlw	-1
  1907  0307  1D03               	skipz
  1908  0308  2B03               	goto	u655
  1909  0309  0874               	movf	___lwdiv@divisor+1,w
  1910  030A  0276               	subwf	___lwdiv@dividend+1,w
  1911  030B  1D03               	skipz
  1912  030C  2B0F               	goto	u665
  1913  030D  0873               	movf	___lwdiv@divisor,w
  1914  030E  0275               	subwf	___lwdiv@dividend,w
  1915  030F                     u665:
  1916  030F  1C03               	skipc
  1917  0310  2B12               	goto	u661
  1918  0311  2B13               	goto	u660
  1919  0312                     u661:
  1920  0312  2B1A               	goto	l1570
  1921  0313                     u660:
  1922  0313                     l1566:
  1923  0313  0873               	movf	___lwdiv@divisor,w
  1924  0314  02F5               	subwf	___lwdiv@dividend,f
  1925  0315  0874               	movf	___lwdiv@divisor+1,w
  1926  0316  1C03               	skipc
  1927  0317  03F6               	decf	___lwdiv@dividend+1,f
  1928  0318  02F6               	subwf	___lwdiv@dividend+1,f
  1929  0319                     l1568:
  1930  0319  144B               	bsf	___lwdiv@quotient,0
  1931  031A                     l1570:
  1932  031A  3001               	movlw	1
  1933  031B                     u675:
  1934  031B  1003               	clrc
  1935  031C  0CF4               	rrf	___lwdiv@divisor+1,f
  1936  031D  0CF3               	rrf	___lwdiv@divisor,f
  1937  031E  3EFF               	addlw	-1
  1938  031F  1D03               	skipz
  1939  0320  2B1B               	goto	u675
  1940  0321                     l1572:
  1941  0321  3001               	movlw	1
  1942  0322  02CA               	subwf	___lwdiv@counter,f
  1943  0323  1D03               	btfss	3,2
  1944  0324  2B26               	goto	u681
  1945  0325  2B27               	goto	u680
  1946  0326                     u681:
  1947  0326  2B02               	goto	l1564
  1948  0327                     u680:
  1949  0327                     l1574:
  1950  0327  084C               	movf	___lwdiv@quotient+1,w
  1951  0328  00F4               	movwf	?___lwdiv+1
  1952  0329  084B               	movf	___lwdiv@quotient,w
  1953  032A  00F3               	movwf	?___lwdiv
  1954  032B                     l580:
  1955  032B  0008               	return
  1956  032C                     __end_of___lwdiv:
  1957                           
  1958                           	psect	text4
  1959  03AE                     __ptext4:	
  1960 ;; *************** function _setup *****************
  1961 ;; Defined at:
  1962 ;;		line 55 in file "Main.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0, pclath, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    4
  1983 ;; This function calls:
  1984 ;;		_init_UART
  1985 ;;		_lcd_cmd
  1986 ;;		_lcd_init
  1987 ;;		_spiInit
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function _setup
  1995  03AE                     _setup:
  1996  03AE                     l1600:	
  1997                           ;incstack = 0
  1998                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1999                           
  2000                           
  2001                           ;Main.c: 56:     ANSEL = 0x00;
  2002  03AE  1683               	bsf	3,5	;RP0=1, select bank3
  2003  03AF  1703               	bsf	3,6	;RP1=1, select bank3
  2004  03B0  0188               	clrf	8	;volatile
  2005                           
  2006                           ;Main.c: 57:     ANSELH = 0x00;
  2007  03B1  0189               	clrf	9	;volatile
  2008                           
  2009                           ;Main.c: 59:     TRISA = 0x00;
  2010  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2011  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2012  03B4  0185               	clrf	5	;volatile
  2013                           
  2014                           ;Main.c: 60:     TRISB = 0x00;
  2015  03B5  0186               	clrf	6	;volatile
  2016  03B6                     l1602:
  2017                           
  2018                           ;Main.c: 61:     TRISCbits.TRISC3 = 0;
  2019  03B6  1187               	bcf	7,3	;volatile
  2020  03B7                     l1604:
  2021                           
  2022                           ;Main.c: 62:     TRISCbits.TRISC4 = 1;
  2023  03B7  1607               	bsf	7,4	;volatile
  2024  03B8                     l1606:
  2025                           
  2026                           ;Main.c: 63:     TRISCbits.TRISC5 = 0;
  2027  03B8  1287               	bcf	7,5	;volatile
  2028                           
  2029                           ;Main.c: 64:     TRISD = 0x00;
  2030  03B9  0188               	clrf	8	;volatile
  2031                           
  2032                           ;Main.c: 65:     TRISE = 0x00;
  2033  03BA  0189               	clrf	9	;volatile
  2034                           
  2035                           ;Main.c: 67:     PORTA = 0x00;
  2036  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2037  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2038  03BD  0185               	clrf	5	;volatile
  2039                           
  2040                           ;Main.c: 68:     PORTB = 0x00;
  2041  03BE  0186               	clrf	6	;volatile
  2042                           
  2043                           ;Main.c: 69:     PORTD = 0x00;
  2044  03BF  0188               	clrf	8	;volatile
  2045                           
  2046                           ;Main.c: 70:     PORTE = 0x00;
  2047  03C0  0189               	clrf	9	;volatile
  2048  03C1                     l1608:
  2049                           
  2050                           ;Main.c: 72:     lcd_init();
  2051  03C1  120A  118A  2295  120A  118A  	fcall	_lcd_init
  2052  03C6                     l1610:
  2053                           
  2054                           ;Main.c: 73:     lcd_cmd(0x0c);
  2055  03C6  300C               	movlw	12
  2056  03C7  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2057  03CC                     l1612:
  2058                           
  2059                           ;Main.c: 75:     init_UART();
  2060  03CC  120A  118A  24C2  120A  118A  	fcall	_init_UART
  2061  03D1                     l1614:
  2062                           
  2063                           ;Main.c: 77:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW
      +                          , SPI_IDLE_2_ACTIVE);
  2064  03D1  01F3               	clrf	spiInit@sDataSample
  2065  03D2  01F4               	clrf	spiInit@sClockIdle
  2066  03D3  01F5               	clrf	spiInit@sTransmitEdge
  2067  03D4  3020               	movlw	32
  2068  03D5  120A  118A  24AC  120A  118A  	fcall	_spiInit
  2069  03DA                     l1616:
  2070                           
  2071                           ;Main.c: 78:     PIE1bits.SSPIE = 1;
  2072  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  2073  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  2074  03DC  158C               	bsf	12,3	;volatile
  2075  03DD                     l1618:
  2076                           
  2077                           ;Main.c: 79:     PIR1bits.SSPIF = 0;
  2078  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2079  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2080  03DF  118C               	bcf	12,3	;volatile
  2081  03E0                     l97:
  2082  03E0  0008               	return
  2083  03E1                     __end_of_setup:
  2084                           
  2085                           	psect	text5
  2086  04AC                     __ptext5:	
  2087 ;; *************** function _spiInit *****************
  2088 ;; Defined at:
  2089 ;;		line 12 in file "spi.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  sType           1    wreg     enum E1264
  2092 ;;  sDataSample     1    3[COMMON] enum E1272
  2093 ;;  sClockIdle      1    4[COMMON] enum E1276
  2094 ;;  sTransmitEdg    1    5[COMMON] enum E1280
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  sType           1    6[COMMON] enum E1264
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         3       0       0       0       0
  2107 ;;      Locals:         1       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0
  2109 ;;      Totals:         4       0       0       0       0
  2110 ;;Total ram usage:        4 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_setup
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _spiInit
  2122  04AC                     _spiInit:
  2123                           
  2124                           ;incstack = 0
  2125                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2126                           ;spiInit@sType stored from wreg
  2127  04AC  00F6               	movwf	spiInit@sType
  2128  04AD                     l1210:
  2129                           
  2130                           ;spi.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 13: {;spi.c: 14:     TRISC5 = 0;
  2131  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  2132  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  2133  04AF  1287               	bcf	7,5	;volatile
  2134                           
  2135                           ;spi.c: 15:     if(sType & 0b00000100)
  2136  04B0  1D76               	btfss	spiInit@sType,2
  2137  04B1  2CB3               	goto	u321
  2138  04B2  2CB4               	goto	u320
  2139  04B3                     u321:
  2140  04B3  2CB8               	goto	l1216
  2141  04B4                     u320:
  2142  04B4                     l1212:
  2143                           
  2144                           ;spi.c: 16:     {;spi.c: 17:         SSPSTAT = sTransmitEdge;
  2145  04B4  0875               	movf	spiInit@sTransmitEdge,w
  2146  04B5  0094               	movwf	20	;volatile
  2147  04B6                     l1214:
  2148                           
  2149                           ;spi.c: 18:         TRISC3 = 1;
  2150  04B6  1587               	bsf	7,3	;volatile
  2151                           
  2152                           ;spi.c: 19:     }
  2153  04B7  2CBC               	goto	l215
  2154  04B8                     l1216:
  2155                           
  2156                           ;spi.c: 21:     {;spi.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2157  04B8  0873               	movf	spiInit@sDataSample,w
  2158  04B9  0475               	iorwf	spiInit@sTransmitEdge,w
  2159  04BA  0094               	movwf	20	;volatile
  2160  04BB                     l1218:
  2161                           
  2162                           ;spi.c: 23:         TRISC3 = 0;
  2163  04BB  1187               	bcf	7,3	;volatile
  2164  04BC                     l215:	
  2165                           ;spi.c: 24:     }
  2166                           
  2167                           
  2168                           ;spi.c: 26:     SSPCON = sType | sClockIdle;
  2169  04BC  0876               	movf	spiInit@sType,w
  2170  04BD  0474               	iorwf	spiInit@sClockIdle,w
  2171  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2172  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2173  04C0  0094               	movwf	20	;volatile
  2174  04C1                     l216:
  2175  04C1  0008               	return
  2176  04C2                     __end_of_spiInit:
  2177                           
  2178                           	psect	text6
  2179  0295                     __ptext6:	
  2180 ;; *************** function _lcd_init *****************
  2181 ;; Defined at:
  2182 ;;		line 8 in file "lcd.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0, pclath, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         0       0       0       0       0
  2197 ;;      Locals:         0       0       0       0       0
  2198 ;;      Temps:          2       0       0       0       0
  2199 ;;      Totals:         2       0       0       0       0
  2200 ;;Total ram usage:        2 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    3
  2203 ;; This function calls:
  2204 ;;		_lcd_cmd
  2205 ;;		_lcd_port
  2206 ;; This function is called by:
  2207 ;;		_setup
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _lcd_init
  2213  0295                     _lcd_init:
  2214  0295                     l1532:	
  2215                           ;incstack = 0
  2216                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2217                           
  2218                           
  2219                           ;lcd.c: 10:     lcd_port(0x00);
  2220  0295  3000               	movlw	0
  2221  0296  120A  118A  24FE  120A  118A  	fcall	_lcd_port
  2222  029B                     l1534:
  2223                           
  2224                           ;lcd.c: 11:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2225  029B  301A               	movlw	26
  2226  029C  00F8               	movwf	??_lcd_init+1
  2227  029D  30F8               	movlw	248
  2228  029E  00F7               	movwf	??_lcd_init
  2229  029F                     u1027:
  2230  029F  0BF7               	decfsz	??_lcd_init,f
  2231  02A0  2A9F               	goto	u1027
  2232  02A1  0BF8               	decfsz	??_lcd_init+1,f
  2233  02A2  2A9F               	goto	u1027
  2234  02A3  0000               	nop
  2235  02A4                     l1536:
  2236                           
  2237                           ;lcd.c: 13:     lcd_cmd(0x30);
  2238  02A4  3030               	movlw	48
  2239  02A5  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2240                           
  2241                           ;lcd.c: 14:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2242  02AA  3007               	movlw	7
  2243  02AB  00F8               	movwf	??_lcd_init+1
  2244  02AC  307D               	movlw	125
  2245  02AD  00F7               	movwf	??_lcd_init
  2246  02AE                     u1037:
  2247  02AE  0BF7               	decfsz	??_lcd_init,f
  2248  02AF  2AAE               	goto	u1037
  2249  02B0  0BF8               	decfsz	??_lcd_init+1,f
  2250  02B1  2AAE               	goto	u1037
  2251  02B2                     l1538:
  2252                           
  2253                           ;lcd.c: 16:     lcd_cmd(0x30);
  2254  02B2  3030               	movlw	48
  2255  02B3  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2256  02B8                     l1540:
  2257                           
  2258                           ;lcd.c: 17:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2259  02B8  300F               	movlw	15
  2260  02B9  00F8               	movwf	??_lcd_init+1
  2261  02BA  3047               	movlw	71
  2262  02BB  00F7               	movwf	??_lcd_init
  2263  02BC                     u1047:
  2264  02BC  0BF7               	decfsz	??_lcd_init,f
  2265  02BD  2ABC               	goto	u1047
  2266  02BE  0BF8               	decfsz	??_lcd_init+1,f
  2267  02BF  2ABC               	goto	u1047
  2268  02C0  2AC1               	nop2
  2269                           
  2270                           ;lcd.c: 19:     lcd_cmd(0x30);
  2271  02C1  3030               	movlw	48
  2272  02C2  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2273                           
  2274                           ;lcd.c: 21:     lcd_cmd(0x38);
  2275  02C7  3038               	movlw	56
  2276  02C8  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2277                           
  2278                           ;lcd.c: 22:     lcd_cmd(0x10);
  2279  02CD  3010               	movlw	16
  2280  02CE  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2281                           
  2282                           ;lcd.c: 23:     lcd_cmd(0x01);
  2283  02D3  3001               	movlw	1
  2284  02D4  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2285                           
  2286                           ;lcd.c: 24:     lcd_cmd(0x06);
  2287  02D9  3006               	movlw	6
  2288  02DA  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2289                           
  2290                           ;lcd.c: 25:     lcd_cmd(0x0F);
  2291  02DF  300F               	movlw	15
  2292  02E0  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2293  02E5                     l246:
  2294  02E5  0008               	return
  2295  02E6                     __end_of_lcd_init:
  2296                           
  2297                           	psect	text7
  2298  04C2                     __ptext7:	
  2299 ;; *************** function _init_UART *****************
  2300 ;; Defined at:
  2301 ;;		line 177 in file "Main.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_setup
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _init_UART
  2331  04C2                     _init_UART:
  2332  04C2                     l1192:	
  2333                           ;incstack = 0
  2334                           ; Regs used in _init_UART: [wreg]
  2335                           
  2336                           
  2337                           ;Main.c: 178:     SPBRG = 25;
  2338  04C2  3019               	movlw	25
  2339  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  2340  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  2341  04C5  0099               	movwf	25	;volatile
  2342  04C6                     l1194:
  2343                           
  2344                           ;Main.c: 179:     BRGH = 1;
  2345  04C6  1518               	bsf	24,2	;volatile
  2346  04C7                     l1196:
  2347                           
  2348                           ;Main.c: 180:     SYNC = 0;
  2349  04C7  1218               	bcf	24,4	;volatile
  2350  04C8                     l1198:
  2351                           
  2352                           ;Main.c: 181:     SPEN = 1;
  2353  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2354  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2355  04CA  1798               	bsf	24,7	;volatile
  2356  04CB                     l1200:
  2357                           
  2358                           ;Main.c: 182:     TRISC7 = 1;
  2359  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  2360  04CC  1303               	bcf	3,6	;RP1=0, select bank1
  2361  04CD  1787               	bsf	7,7	;volatile
  2362  04CE                     l1202:
  2363                           
  2364                           ;Main.c: 183:     TRISC6 = 0;
  2365  04CE  1307               	bcf	7,6	;volatile
  2366  04CF                     l1204:
  2367                           
  2368                           ;Main.c: 184:     TXSTAbits.TX9 = 0;
  2369  04CF  1318               	bcf	24,6	;volatile
  2370  04D0                     l1206:
  2371                           
  2372                           ;Main.c: 185:     CREN = 1;
  2373  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2374  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2375  04D2  1618               	bsf	24,4	;volatile
  2376  04D3                     l1208:
  2377                           
  2378                           ;Main.c: 186:     TXEN = 1;
  2379  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  2380  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  2381  04D5  1698               	bsf	24,5	;volatile
  2382  04D6                     l117:
  2383  04D6  0008               	return
  2384  04D7                     __end_of_init_UART:
  2385                           
  2386                           	psect	text8
  2387  032C                     __ptext8:	
  2388 ;; *************** function _lcd_write_string *****************
  2389 ;; Defined at:
  2390 ;;		line 85 in file "lcd.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  a               2    7[COMMON] PTR unsigned char 
  2393 ;;		 -> slave_3(6), slave_2(6), slave_1(6), STR_1(16), 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  i               2    3[BANK0 ] int 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2405 ;;      Params:         2       0       0       0       0
  2406 ;;      Locals:         0       2       0       0       0
  2407 ;;      Temps:          0       3       0       0       0
  2408 ;;      Totals:         2       5       0       0       0
  2409 ;;Total ram usage:        7 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		_lcd_write_char
  2414 ;; This function is called by:
  2415 ;;		_main
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function _lcd_write_string
  2421  032C                     _lcd_write_string:
  2422  032C                     l1624:	
  2423                           ;incstack = 0
  2424                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2425                           
  2426                           
  2427                           ;lcd.c: 85: void lcd_write_string(uint8_t *a);lcd.c: 86: {;lcd.c: 87:     for(int i=0; a
      +                          [i] != '\0'; i++)
  2428  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2429  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2430  032E  01CD               	clrf	lcd_write_string@i
  2431  032F  01CE               	clrf	lcd_write_string@i+1
  2432  0330  2B55               	goto	l1630
  2433  0331                     l1626:
  2434                           
  2435                           ;lcd.c: 88:     {;lcd.c: 89:        lcd_write_char(a[i]);
  2436  0331  084D               	movf	lcd_write_string@i,w
  2437  0332  0777               	addwf	lcd_write_string@a,w
  2438  0333  00CB               	movwf	??_lcd_write_string+1
  2439  0334  0878               	movf	lcd_write_string@a+1,w
  2440  0335  00CA               	movwf	??_lcd_write_string
  2441  0336  1803               	skipnc
  2442  0337  0ACA               	incf	??_lcd_write_string,f
  2443  0338  1FCD               	btfss	lcd_write_string@i,7
  2444  0339  2B3B               	goto	u750
  2445  033A  03CA               	decf	??_lcd_write_string,f
  2446  033B                     u750:
  2447  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2448  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2449  033D  084A               	movf	??_lcd_write_string,w
  2450  033E  00CC               	movwf	??_lcd_write_string+2
  2451  033F  084C               	movf	??_lcd_write_string+2,w
  2452  0340  00FF               	movwf	btemp+1
  2453  0341  084B               	movf	??_lcd_write_string+1,w
  2454  0342  0084               	movwf	4
  2455  0343  120A  118A  2400  120A  118A  	fcall	stringtab
  2456  0348  120A  118A  2478  120A  118A  	fcall	_lcd_write_char
  2457  034D                     l1628:
  2458                           
  2459                           ;lcd.c: 90:     }
  2460  034D  3001               	movlw	1
  2461  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2462  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0350  07CD               	addwf	lcd_write_string@i,f
  2464  0351  1803               	skipnc
  2465  0352  0ACE               	incf	lcd_write_string@i+1,f
  2466  0353  3000               	movlw	0
  2467  0354  07CE               	addwf	lcd_write_string@i+1,f
  2468  0355                     l1630:
  2469  0355  084D               	movf	lcd_write_string@i,w
  2470  0356  0777               	addwf	lcd_write_string@a,w
  2471  0357  00CB               	movwf	??_lcd_write_string+1
  2472  0358  0878               	movf	lcd_write_string@a+1,w
  2473  0359  00CA               	movwf	??_lcd_write_string
  2474  035A  1803               	skipnc
  2475  035B  0ACA               	incf	??_lcd_write_string,f
  2476  035C  1FCD               	btfss	lcd_write_string@i,7
  2477  035D  2B5F               	goto	u760
  2478  035E  03CA               	decf	??_lcd_write_string,f
  2479  035F                     u760:
  2480  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0361  084A               	movf	??_lcd_write_string,w
  2483  0362  00CC               	movwf	??_lcd_write_string+2
  2484  0363  084C               	movf	??_lcd_write_string+2,w
  2485  0364  00FF               	movwf	btemp+1
  2486  0365  084B               	movf	??_lcd_write_string+1,w
  2487  0366  0084               	movwf	4
  2488  0367  120A  118A  2400  120A  118A  	fcall	stringtab
  2489  036C  3A00               	xorlw	0
  2490  036D  1D03               	skipz
  2491  036E  2B70               	goto	u771
  2492  036F  2B71               	goto	u770
  2493  0370                     u771:
  2494  0370  2B31               	goto	l1626
  2495  0371                     u770:
  2496  0371                     l270:
  2497  0371  0008               	return
  2498  0372                     __end_of_lcd_write_string:
  2499                           
  2500                           	psect	text9
  2501  0478                     __ptext9:	
  2502 ;; *************** function _lcd_write_char *****************
  2503 ;; Defined at:
  2504 ;;		line 75 in file "lcd.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  data            1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  data            1    6[COMMON] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2518 ;;      Params:         0       0       0       0       0
  2519 ;;      Locals:         1       0       0       0       0
  2520 ;;      Temps:          2       0       0       0       0
  2521 ;;      Totals:         3       0       0       0       0
  2522 ;;Total ram usage:        3 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    2
  2525 ;; This function calls:
  2526 ;;		_lcd_port
  2527 ;; This function is called by:
  2528 ;;		_lcd_write_string
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           
  2533                           ;psect for function _lcd_write_char
  2534  0478                     _lcd_write_char:
  2535                           
  2536                           ;incstack = 0
  2537                           ; Regs used in _lcd_write_char: [wreg+status,2+status,0+pclath+cstack]
  2538                           ;lcd_write_char@data stored from wreg
  2539  0478  00F6               	movwf	lcd_write_char@data
  2540  0479                     l1542:
  2541                           
  2542                           ;lcd.c: 75: void lcd_write_char(uint8_t data);lcd.c: 76: {;lcd.c: 77:     PORTEbits.RE0 
      +                          = 1;
  2543  0479  1283               	bcf	3,5	;RP0=0, select bank0
  2544  047A  1303               	bcf	3,6	;RP1=0, select bank0
  2545  047B  1409               	bsf	9,0	;volatile
  2546  047C                     l1544:
  2547                           
  2548                           ;lcd.c: 78:     lcd_port(data);
  2549  047C  0876               	movf	lcd_write_char@data,w
  2550  047D  120A  118A  24FE  120A  118A  	fcall	_lcd_port
  2551  0482                     l1546:
  2552                           
  2553                           ;lcd.c: 80:     PORTEbits.RE1 = 1;
  2554  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0483  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0484  1489               	bsf	9,1	;volatile
  2557  0485                     l1548:
  2558                           
  2559                           ;lcd.c: 81:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2560  0485  3006               	movlw	6
  2561  0486  00F5               	movwf	??_lcd_write_char+1
  2562  0487  3030               	movlw	48
  2563  0488  00F4               	movwf	??_lcd_write_char
  2564  0489                     u1057:
  2565  0489  0BF4               	decfsz	??_lcd_write_char,f
  2566  048A  2C89               	goto	u1057
  2567  048B  0BF5               	decfsz	??_lcd_write_char+1,f
  2568  048C  2C89               	goto	u1057
  2569  048D  0000               	nop
  2570  048E                     l1550:
  2571                           
  2572                           ;lcd.c: 82:     PORTEbits.RE1 = 0;
  2573  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2574  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2575  0490  1089               	bcf	9,1	;volatile
  2576  0491                     l264:
  2577  0491  0008               	return
  2578  0492                     __end_of_lcd_write_char:
  2579                           
  2580                           	psect	text10
  2581  045D                     __ptext10:	
  2582 ;; *************** function _lcd_move_cursor *****************
  2583 ;; Defined at:
  2584 ;;		line 63 in file "lcd.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  row             1    wreg     unsigned char 
  2587 ;;  col             1    7[COMMON] unsigned char 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  row             1    8[COMMON] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         1       0       0       0       0
  2600 ;;      Locals:         1       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0
  2602 ;;      Totals:         2       0       0       0       0
  2603 ;;Total ram usage:        2 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    3
  2606 ;; This function calls:
  2607 ;;		_lcd_cmd
  2608 ;; This function is called by:
  2609 ;;		_main
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _lcd_move_cursor
  2615  045D                     _lcd_move_cursor:
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _lcd_move_cursor: [wreg+status,2+status,0+pclath+cstack]
  2619                           ;lcd_move_cursor@row stored from wreg
  2620  045D  00F8               	movwf	lcd_move_cursor@row
  2621  045E                     l1632:
  2622                           
  2623                           ;lcd.c: 63: void lcd_move_cursor(uint8_t row, uint8_t col);lcd.c: 64: {;lcd.c: 65:     i
      +                          f(row == 0)
  2624  045E  0878               	movf	lcd_move_cursor@row,w
  2625  045F  1D03               	btfss	3,2
  2626  0460  2C62               	goto	u781
  2627  0461  2C63               	goto	u780
  2628  0462                     u781:
  2629  0462  2C6B               	goto	l1636
  2630  0463                     u780:
  2631  0463                     l1634:
  2632                           
  2633                           ;lcd.c: 66:     {;lcd.c: 67:         lcd_cmd(0x80 + col);
  2634  0463  0877               	movf	lcd_move_cursor@col,w
  2635  0464  3E80               	addlw	128
  2636  0465  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2637                           
  2638                           ;lcd.c: 68:     }
  2639  046A  2C77               	goto	l261
  2640  046B                     l1636:
  2641  046B  0378               	decf	lcd_move_cursor@row,w
  2642  046C  1D03               	btfss	3,2
  2643  046D  2C6F               	goto	u791
  2644  046E  2C70               	goto	u790
  2645  046F                     u791:
  2646  046F  2C77               	goto	l261
  2647  0470                     u790:
  2648  0470                     l1638:
  2649                           
  2650                           ;lcd.c: 70:     {;lcd.c: 71:         lcd_cmd(0xC0 + col);
  2651  0470  0877               	movf	lcd_move_cursor@col,w
  2652  0471  3EC0               	addlw	192
  2653  0472  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2654  0477                     l261:
  2655  0477  0008               	return
  2656  0478                     __end_of_lcd_move_cursor:
  2657                           
  2658                           	psect	text11
  2659  04E9                     __ptext11:	
  2660 ;; *************** function _lcd_clear *****************
  2661 ;; Defined at:
  2662 ;;		line 56 in file "lcd.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         0       0       0       0       0
  2677 ;;      Locals:         0       0       0       0       0
  2678 ;;      Temps:          0       0       0       0       0
  2679 ;;      Totals:         0       0       0       0       0
  2680 ;;Total ram usage:        0 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    3
  2683 ;; This function calls:
  2684 ;;		_lcd_cmd
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           
  2691                           ;psect for function _lcd_clear
  2692  04E9                     _lcd_clear:
  2693  04E9                     l1622:	
  2694                           ;incstack = 0
  2695                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  2696                           
  2697                           
  2698                           ;lcd.c: 58:     lcd_cmd(0);
  2699  04E9  3000               	movlw	0
  2700  04EA  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2701                           
  2702                           ;lcd.c: 59:     lcd_cmd(1);
  2703  04EF  3001               	movlw	1
  2704  04F0  120A  118A  2492  120A  118A  	fcall	_lcd_cmd
  2705  04F5                     l255:
  2706  04F5  0008               	return
  2707  04F6                     __end_of_lcd_clear:
  2708                           
  2709                           	psect	text12
  2710  0492                     __ptext12:	
  2711 ;; *************** function _lcd_cmd *****************
  2712 ;; Defined at:
  2713 ;;		line 46 in file "lcd.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  cmd             1    wreg     unsigned char 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  cmd             1    6[COMMON] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, status,2, status,0, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2727 ;;      Params:         0       0       0       0       0
  2728 ;;      Locals:         1       0       0       0       0
  2729 ;;      Temps:          2       0       0       0       0
  2730 ;;      Totals:         3       0       0       0       0
  2731 ;;Total ram usage:        3 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    2
  2734 ;; This function calls:
  2735 ;;		_lcd_port
  2736 ;; This function is called by:
  2737 ;;		_setup
  2738 ;;		_lcd_init
  2739 ;;		_lcd_clear
  2740 ;;		_lcd_move_cursor
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _lcd_cmd
  2746  0492                     _lcd_cmd:
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  2750                           ;lcd_cmd@cmd stored from wreg
  2751  0492  00F6               	movwf	lcd_cmd@cmd
  2752  0493                     l1522:
  2753                           
  2754                           ;lcd.c: 46: void lcd_cmd(uint8_t cmd);lcd.c: 47: {;lcd.c: 48:     PORTEbits.RE0 = 0;
  2755  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0495  1009               	bcf	9,0	;volatile
  2758  0496                     l1524:
  2759                           
  2760                           ;lcd.c: 49:     lcd_port(cmd);
  2761  0496  0876               	movf	lcd_cmd@cmd,w
  2762  0497  120A  118A  24FE  120A  118A  	fcall	_lcd_port
  2763  049C                     l1526:
  2764                           
  2765                           ;lcd.c: 51:     PORTEbits.RE1 = 1;
  2766  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2767  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2768  049E  1489               	bsf	9,1	;volatile
  2769  049F                     l1528:
  2770                           
  2771                           ;lcd.c: 52:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2772  049F  3006               	movlw	6
  2773  04A0  00F5               	movwf	??_lcd_cmd+1
  2774  04A1  3030               	movlw	48
  2775  04A2  00F4               	movwf	??_lcd_cmd
  2776  04A3                     u1067:
  2777  04A3  0BF4               	decfsz	??_lcd_cmd,f
  2778  04A4  2CA3               	goto	u1067
  2779  04A5  0BF5               	decfsz	??_lcd_cmd+1,f
  2780  04A6  2CA3               	goto	u1067
  2781  04A7  0000               	nop
  2782  04A8                     l1530:
  2783                           
  2784                           ;lcd.c: 53:     PORTEbits.RE1 = 0;
  2785  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2786  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2787  04AA  1089               	bcf	9,1	;volatile
  2788  04AB                     l252:
  2789  04AB  0008               	return
  2790  04AC                     __end_of_lcd_cmd:
  2791                           
  2792                           	psect	text13
  2793  04FE                     __ptext13:	
  2794 ;; *************** function _lcd_port *****************
  2795 ;; Defined at:
  2796 ;;		line 28 in file "lcd.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  a               1    wreg     unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  a               1    3[COMMON] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2810 ;;      Params:         0       0       0       0       0
  2811 ;;      Locals:         1       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0
  2813 ;;      Totals:         1       0       0       0       0
  2814 ;;Total ram usage:        1 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_lcd_init
  2821 ;;		_lcd_cmd
  2822 ;;		_lcd_write_char
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _lcd_port
  2828  04FE                     _lcd_port:
  2829                           
  2830                           ;incstack = 0
  2831                           ; Regs used in _lcd_port: [wreg]
  2832                           ;lcd_port@a stored from wreg
  2833  04FE  00F3               	movwf	lcd_port@a
  2834  04FF                     l1520:
  2835                           
  2836                           ;lcd.c: 28: void lcd_port(uint8_t a);lcd.c: 29: {;lcd.c: 31:     PORTD = a;
  2837  04FF  0873               	movf	lcd_port@a,w
  2838  0500  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0501  1303               	bcf	3,6	;RP1=0, select bank0
  2840  0502  0088               	movwf	8	;volatile
  2841  0503                     l249:
  2842  0503  0008               	return
  2843  0504                     __end_of_lcd_port:
  2844                           
  2845                           	psect	text14
  2846  0432                     __ptext14:	
  2847 ;; *************** function _Text_Uart *****************
  2848 ;; Defined at:
  2849 ;;		line 48 in file "Main.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  text            1    wreg     PTR unsigned char 
  2852 ;;		 -> STR_7(5), STR_6(4), STR_5(16), 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  text            1    7[COMMON] PTR unsigned char 
  2855 ;;		 -> STR_7(5), STR_6(4), STR_5(16), 
  2856 ;;  i               2    5[COMMON] int 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2866 ;;      Params:         0       0       0       0       0
  2867 ;;      Locals:         3       0       0       0       0
  2868 ;;      Temps:          2       0       0       0       0
  2869 ;;      Totals:         5       0       0       0       0
  2870 ;;Total ram usage:        5 bytes
  2871 ;; Hardware stack levels used:    2
  2872 ;; Hardware stack levels required when called:    1
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _Text_Uart
  2882  0432                     _Text_Uart:
  2883                           
  2884                           ;incstack = 0
  2885                           ; Regs used in _Text_Uart: [wreg-fsr0h+status,2+status,0+pclath]
  2886                           ;Text_Uart@text stored from wreg
  2887  0432  00F7               	movwf	Text_Uart@text
  2888  0433                     l1278:
  2889                           
  2890                           ;Main.c: 48: void Text_Uart(char *text);Main.c: 49: {;Main.c: 50:   for(int i=0;text[i]!
      +                          ='\0';i++){
  2891  0433  01F5               	clrf	Text_Uart@i
  2892  0434  01F6               	clrf	Text_Uart@i+1
  2893  0435  2C4F               	goto	l91
  2894  0436                     l1280:
  2895                           
  2896                           ;Main.c: 51:     TXREG = (text[i]);
  2897  0436  0875               	movf	Text_Uart@i,w
  2898  0437  0777               	addwf	Text_Uart@text,w
  2899  0438  0084               	movwf	4
  2900  0439  120A  118A  240A  120A  118A  	fcall	stringdir
  2901  043E  1283               	bcf	3,5	;RP0=0, select bank0
  2902  043F  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0440  0099               	movwf	25	;volatile
  2904  0441                     l1282:
  2905                           
  2906                           ;Main.c: 52:   _delay((unsigned long)((5)*(4000000/4000.0)));}
  2907  0441  3007               	movlw	7
  2908  0442  00F4               	movwf	??_Text_Uart+1
  2909  0443  307D               	movlw	125
  2910  0444  00F3               	movwf	??_Text_Uart
  2911  0445                     u1077:
  2912  0445  0BF3               	decfsz	??_Text_Uart,f
  2913  0446  2C45               	goto	u1077
  2914  0447  0BF4               	decfsz	??_Text_Uart+1,f
  2915  0448  2C45               	goto	u1077
  2916  0449                     l1284:
  2917  0449  3001               	movlw	1
  2918  044A  07F5               	addwf	Text_Uart@i,f
  2919  044B  1803               	skipnc
  2920  044C  0AF6               	incf	Text_Uart@i+1,f
  2921  044D  3000               	movlw	0
  2922  044E  07F6               	addwf	Text_Uart@i+1,f
  2923  044F                     l91:
  2924  044F  0875               	movf	Text_Uart@i,w
  2925  0450  0777               	addwf	Text_Uart@text,w
  2926  0451  0084               	movwf	4
  2927  0452  120A  118A  240A  120A  118A  	fcall	stringdir
  2928  0457  3A00               	xorlw	0
  2929  0458  1D03               	skipz
  2930  0459  2C5B               	goto	u461
  2931  045A  2C5C               	goto	u460
  2932  045B                     u461:
  2933  045B  2C36               	goto	l1280
  2934  045C                     u460:
  2935  045C                     l94:
  2936  045C  0008               	return
  2937  045D                     __end_of_Text_Uart:
  2938                           
  2939                           	psect	text15
  2940  04D7                     __ptext15:	
  2941 ;; *************** function _isr *****************
  2942 ;; Defined at:
  2943 ;;		line 83 in file "Main.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2957 ;;      Params:         0       0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0
  2959 ;;      Temps:          3       0       0       0       0
  2960 ;;      Totals:         3       0       0       0       0
  2961 ;;Total ram usage:        3 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; This function calls:
  2964 ;;		Nothing
  2965 ;; This function is called by:
  2966 ;;		Interrupt level 1
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function _isr
  2972  04D7                     _isr:
  2973  04D7                     i1l1032:
  2974                           
  2975                           ;Main.c: 85:     if (PIR1bits.SSPIF == 1) {
  2976  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2977  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2978  04D9  1D8C               	btfss	12,3	;volatile
  2979  04DA  2CDC               	goto	u28_21
  2980  04DB  2CDD               	goto	u28_20
  2981  04DC                     u28_21:
  2982  04DC  2CE2               	goto	i1l103
  2983  04DD                     u28_20:
  2984  04DD                     i1l1034:
  2985                           
  2986                           ;Main.c: 86:         Test1 = SSPBUF;
  2987  04DD  0813               	movf	19,w	;volatile
  2988  04DE  00F0               	movwf	??_isr
  2989  04DF  0870               	movf	??_isr,w
  2990  04E0  00FA               	movwf	_Test1
  2991  04E1                     i1l1036:
  2992                           
  2993                           ;Main.c: 87:         SSPIF = 0;
  2994  04E1  118C               	bcf	12,3	;volatile
  2995  04E2                     i1l103:
  2996  04E2  0872               	movf	??_isr+2,w
  2997  04E3  008A               	movwf	10
  2998  04E4  0E71               	swapf	??_isr+1,w
  2999  04E5  0083               	movwf	3
  3000  04E6  0EFE               	swapf	btemp,f
  3001  04E7  0E7E               	swapf	btemp,w
  3002  04E8  0009               	retfie
  3003  04E9                     __end_of_isr:
  3004  007E                     btemp	set	126	;btemp
  3005  007E                     wtemp0	set	126
  3006                           
  3007                           	psect	intentry
  3008  0004                     __pintentry:	
  3009                           ;incstack = 0
  3010                           ; Regs used in _isr: [wreg]
  3011                           
  3012  0004                     interrupt_function:
  3013  007E                     saved_w	set	btemp
  3014  0004  00FE               	movwf	btemp
  3015  0005  0E03               	swapf	3,w
  3016  0006  00F1               	movwf	??_isr+1
  3017  0007  080A               	movf	10,w
  3018  0008  00F2               	movwf	??_isr+2
  3019  0009  120A  118A  2CD7   	ljmp	_isr
  3020                           
  3021                           	psect	config
  3022                           
  3023                           ;Config register CONFIG1 @ 0x2007
  3024                           ;	Oscillator Selection bits
  3025                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3026                           ;	Watchdog Timer Enable bit
  3027                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3028                           ;	Power-up Timer Enable bit
  3029                           ;	PWRTE = OFF, PWRT disabled
  3030                           ;	RE3/MCLR pin function select bit
  3031                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3032                           ;	Code Protection bit
  3033                           ;	CP = OFF, Program memory code protection is disabled
  3034                           ;	Data Code Protection bit
  3035                           ;	CPD = OFF, Data memory code protection is disabled
  3036                           ;	Brown Out Reset Selection bits
  3037                           ;	BOREN = OFF, BOR disabled
  3038                           ;	Internal External Switchover bit
  3039                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3040                           ;	Fail-Safe Clock Monitor Enabled bit
  3041                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3042                           ;	Low Voltage Programming Enable bit
  3043                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3044                           ;	In-Circuit Debugger Mode bit
  3045                           ;	DEBUG = 0x1, unprogrammed default
  3046  2007                     	org	8199
  3047  2007  20D4               	dw	8404
  3048                           
  3049                           ;Config register CONFIG2 @ 0x2008
  3050                           ;	Brown-out Reset Selection bit
  3051                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3052                           ;	Flash Program Memory Self Write Enable bits
  3053                           ;	WRT = OFF, Write protection off
  3054  2008                     	org	8200
  3055  2008  3FFF               	dw	16383

Data Sizes:
    Strings     24
    Constant    10
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     23      65
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> slave_3(BANK0[6]), slave_2(BANK0[6]), slave_1(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_write_string@a	PTR unsigned char  size(2) Largest target is 16
		 -> slave_3(BANK0[6]), slave_2(BANK0[6]), slave_1(BANK0[6]), STR_1(CODE[16]), 

    Text_Uart@text	PTR unsigned char  size(1) Largest target is 16
		 -> STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_lcd_init
    _lcd_init->_lcd_cmd
    _lcd_write_string->_lcd_write_char
    _lcd_write_char->_lcd_port
    _lcd_move_cursor->_lcd_cmd
    _lcd_clear->_lcd_cmd
    _lcd_cmd->_lcd_port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3681
                                             20 BANK0      3     3      0
                          _Text_Uart
                          _lcd_clear
                    _lcd_move_cursor
                   _lcd_write_string
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1907
                                              7 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              8 COMMON     2     2      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     515
                          _init_UART
                            _lcd_cmd
                           _lcd_init
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             2     2      0      93
                                              7 COMMON     2     2      0
                            _lcd_cmd
                           _lcd_port
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     7     5      2     552
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (2) _lcd_write_char                                       3     3      0      62
                                              4 COMMON     3     3      0
                           _lcd_port
 ---------------------------------------------------------------------------------
 (1) _lcd_move_cursor                                      2     1      1     456
                                              7 COMMON     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      62
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              3     3      0      62
                                              4 COMMON     3     3      0
                           _lcd_port
 ---------------------------------------------------------------------------------
 (3) _lcd_port                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Text_Uart                                            5     5      0     189
                                              3 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Text_Uart
   _lcd_clear
     _lcd_cmd
       _lcd_port
   _lcd_move_cursor
     _lcd_cmd
       _lcd_port
   _lcd_write_string
     _lcd_write_char
       _lcd_port
   _setup
     _init_UART
     _lcd_cmd
       _lcd_port
     _lcd_init
       _lcd_cmd
         _lcd_port
       _lcd_port
     _spiInit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      4C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     17      41       5       81.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      4C      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 12:04:08 2021

                        pc 0002                         l91 044F                         l94 045C  
                       l97 03E0                         fsr 0004                        l108 0022  
                      l117 04D6                        l215 04BC                        l216 04C1  
                      l304 0294                        l252 04AB                        l261 0477  
                      l270 0371                        l246 02E5                        l255 04F5  
                      l264 0491                        l249 0503                        l580 032B  
                      l590 03AD                        u320 04B4                        u321 04B3  
                      u460 045C                        u620 02F0                        u461 045B  
                      u621 02EF                        u710 038C                        u711 038B  
                      u640 0302                        u720 0396                        u800 01B9  
                      u641 0301                        u721 0395                        u705 037E  
                      u801 01B8                        u810 01F3                        u635 02F4  
                      u811 01F2                        u660 0313                        u740 03A9  
                      u820 0219                        u661 0312                        u741 03A8  
                      u725 0392                        u821 0218                        u750 033B  
                      u830 0224                        u655 0303                        u735 039D  
                      u831 0223                        u760 035F                        u680 0327  
                      u840 022A                        u681 0326                        u665 030F  
                      u841 0229                        u825 0215                        u770 0371  
                      u690 037A                        u850 027E                        u771 0370  
                      u675 031B                        u691 0379                        u851 027D  
                      u907 003A                        u780 0463                        u860 0290  
                      u781 0462                        u861 028F                        u917 0058  
                      u790 0470                        u870 002F                        u791 046F  
                      u927 0079                        u871 002E                        u880 004D  
                      u937 0118                        u881 004C                        u890 006E  
                      u947 0127                        u891 006D                        u957 0136  
                      u967 014B                        u977 015A                        u987 0169  
                      u997 017E                        _isr 04D7                        fsr0 0004  
                      _str 0020                        indf 0000                _SPI_slave_1 0036  
              _SPI_slave_2 0035                _SPI_slave_3 0034                       l1200 04CB  
                     l1202 04CE                       l1210 04AD                       l1204 04CF  
                     l1212 04B4                       l1206 04D0                       l1214 04B6  
                     l1208 04D3                       l1216 04B8                       l1218 04BB  
                     l1280 0436                       l1520 04FF                       l1192 04C2  
                     l1600 03AE                       l1282 0441                       l1530 04A8  
                     l1522 0493                       l1194 04C6                       l1610 03C6  
                     l1602 03B6                       l1284 0449                       l1524 0496  
                     l1196 04C7                       l1540 02B8                       l1532 0295  
                     l1612 03CC                       l1604 03B7                       l1278 0433  
                     l1526 049C                       l1622 04E9                       l1550 048E  
                     l1542 0479                       l1630 0355                       l1198 04C8  
                     l1534 029B                       l1614 03D1                       l1606 03B8  
                     l1710 0044                       l1702 001D                       l1528 049F  
                     l1632 045E                       l1544 047C                       l1624 032C  
                     l1536 02A4                       l1616 03DA                       l1608 03C1  
                     l1560 02FA                       l1552 02E6                       l1640 01AE  
                     l1800 0178                       l1720 004D                       l1712 0045  
                     l1704 0027                       l1634 0463                       l1546 0482  
                     l1626 0331                       l1538 02B2                       l1618 03DD  
                     l1570 031A                       l1562 02FE                       l1554 02EA  
                     l1642 01B3                       l1810 01A1                       l1802 0183  
                     l1730 0065                       l1722 0050                       l1714 0046  
                     l1706 002F                       l1636 046B                       l1548 0485  
                     l1628 034D                       l1572 0321                       l1564 0302  
                     l1556 02F0                       l1580 037A                       l1660 01F3  
                     l1652 01C6                       l1644 01B9                       l1812 01A5  
                     l1804 0187                       l1740 0084                       l1724 0062  
                     l1732 0069                       l1716 0047                       l1708 0032  
                     l1638 0470                       l1566 0313                       l1558 02F3  
                     l1574 0327                       l1590 0396                       l1582 037D  
                     l1670 01FE                       l1662 01F7                       l1654 01E3  
                     l1646 01C0                       l1806 0192                       l1750 009A  
                     l1742 0085                       l1734 006E                       l1726 0063  
                     l1718 0048                       l1568 0319                       l1592 039C  
                     l1584 0384                       l1680 0231                       l1664 01FC  
                     l1656 01EB                       l1648 01C5                       l1808 0196  
                     l1760 00DE                       l1752 00AD                       l1744 0086  
                     l1736 0071                       l1728 0064                       l1594 03A3  
                     l1586 0388                       l1578 0372                       l1690 0275  
                     l1682 0235                       l1674 021A                       l1658 01EF  
                     l1834 01D8                       l1770 0110                       l1762 00EA  
                     l1754 00B6                       l1738 0083                       l1746 008A  
                     l1588 038C                       l1596 03A9                       l1684 023A  
                     l1676 0224                       l1692 027E                       l1780 0130  
                     l1772 0112                       l1764 00FD                       l1756 00C2  
                     l1748 0093                       l1686 026A                       l1678 022A  
                     l1694 0290                       l1790 0154                       l1782 013B  
                     l1774 011D                       l1766 0106                       l1758 00D5  
                     l1688 0271                       l1792 015F                       l1784 0141  
                     l1776 0121                       l1768 010C                       l1794 0163  
                     l1786 0145                       l1778 012C                       l1796 016E  
                     l1788 0150                       l1798 0174                       ?_isr 0070  
                     STR_1 041A                       STR_2 042F                       STR_3 042F  
                     STR_4 042F                       STR_5 041A                       STR_6 042B  
                     STR_7 042A                       _BRGH 04C2                       _CREN 00C4  
                     u1007 018D                       u1017 019C                       u1027 029F  
                     u1037 02AE                       u1047 02BC                       u1057 0489  
                     u1067 04A3                       u1077 0445                       _SPEN 00C7  
                     _TXEN 04C5                       _SYNC 04C4     __end_of_lcd_write_char 0492  
                     _main 001D                       btemp 007E                       start 000C  
         ?_lcd_move_cursor 0077                      ??_isr 0070                      ?_main 0070  
                    _ANSEL 0188            __end_of___lwdiv 032C                      i1l103 04E2  
          __end_of___lwmod 03AE                      _SPBRG 0099                      _PORTA 0005  
                    _PORTB 0006                      _PORTD 0008                      _PORTE 0009  
                    u28_20 04DD                      u28_21 04DC                      _TRISA 0085  
                    _TRISB 0086                      _TRISD 0088                      _TRISE 0089  
                    _SSPIF 0063                      _TXREG 0019                      _Test1 007A  
          __end_of_lcd_cmd 04AC            __end_of_dpowers 041A                      _setup 03AE  
                    pclath 000A            __end_of_spiInit 04C2            ?_lcd_write_char 0070  
                    status 0003                      wtemp0 007E            __end_of_sprintf 0295  
          __initialization 000F               __end_of_main 01AB                     ??_main 005E  
                   ?_setup 0070                     _ANSELH 0189                     i1l1032 04D7  
                   i1l1034 04DD                     i1l1036 04E1                     _TRISC3 043B  
                   _TRISC5 043D                     _TRISC6 043E                     _TRISC7 043F  
                   _SSPBUF 0013                     _SSPCON 0014           __end_of_lcd_init 02E6  
         __end_of_lcd_port 0504                  ??___lwdiv 0077                  ??___lwmod 0078  
 __end_of_lcd_write_string 0372                  ??_lcd_cmd 0074                 Text_Uart@i 0075  
       __size_of_Text_Uart 002B                     saved_w 007E                  ??_spiInit 0076  
                ??_sprintf 0054          lcd_write_string@a 0077          lcd_write_string@i 004D  
  __end_of__initialization 0019             __pcstackCOMMON 0070              __end_of_setup 03E1  
       __size_of_lcd_clear 000D                    ??_setup 0079                 __pbssBANK0 0020  
       __size_of_init_UART 0015          __end_of_Text_Uart 045D                 __pmaintext 001D  
               __pintentry 0004           ??_lcd_write_char 0074                  ?_lcd_init 0070  
                  _SSPSTAT 0094                  ?_lcd_port 0070                 __stringtab 0400  
       lcd_write_char@data 0076          __end_of_lcd_clear 04F6                    ___lwdiv 02E6  
                  ___lwmod 0372                    __ptext1 01AB                    __ptext2 0372  
                  __ptext3 02E6                    __ptext4 03AE                    __ptext5 04AC  
                  __ptext6 0295                    __ptext7 04C2                    __ptext8 032C  
                  __ptext9 0478                    _lcd_cmd 0492          __end_of_init_UART 04D7  
 __size_of_lcd_move_cursor 001B                    _dpowers 0410               __size_of_isr 0012  
                  _slave_1 0044                    _slave_2 003E                    _slave_3 0038  
                  _spiInit 04AC                    _sprintf 01AB                    clrloop0 04F7  
               ??_lcd_init 0077                 ??_lcd_port 0073       end_of_initialization 0019  
                _PORTAbits 0005          ?_lcd_write_string 0077                  _PORTEbits 0009  
       ??_lcd_write_string 004A                  _TRISCbits 0087                 lcd_cmd@cmd 0076  
                _TXSTAbits 0098        start_initialization 000F                __end_of_isr 04E9  
        ??_lcd_move_cursor 0078                  _Text_Uart 0432                __pbssCOMMON 007A  
                ___latbits 0002              __pcstackBANK0 004A          __size_of_lcd_init 0051  
              sprintf@flag 0058          __size_of_lcd_port 0006                sprintf@prec 0059  
         ___lwdiv@dividend 0075                   ?___lwdiv 0073                   ?___lwmod 004D  
               ?_Text_Uart 0070                  _lcd_clear 04E9                  __pstrings 0400  
                 ?_lcd_cmd 0070         lcd_move_cursor@col 0077         lcd_move_cursor@row 0078  
                _init_UART 04C2                   ?_spiInit 0073           ___lwdiv@quotient 004B  
                 ?_sprintf 0051             __size_of_setup 0033       spiInit@sTransmitEdge 0075  
        interrupt_function 0004                  clear_ram0 04F6                   _PIE1bits 008C  
       spiInit@sDataSample 0073                   _PIR1bits 000C                 ?_lcd_clear 0070  
              __stringbase 040F                  lcd_port@a 0073                 ?_init_UART 0070  
__size_of_lcd_write_string 0046    __size_of_lcd_write_char 001A                ??_Text_Uart 0073  
         __size_of___lwdiv 0046           __size_of___lwmod 003C            _lcd_move_cursor 045D  
       __end_of__stringtab 0410           __size_of_lcd_cmd 001A                 sprintf@val 005A  
          ___lwdiv@divisor 0073            ___lwdiv@counter 004A                   __ptext10 045D  
                 __ptext11 04E9                   __ptext12 0492                   __ptext13 04FE  
                 __ptext14 0432                   __ptext15 04D7              Text_Uart@text 0077  
         __size_of_spiInit 0016                   _lcd_init 0295                   _lcd_port 04FE  
         __size_of_sprintf 00EA              __size_of_main 018E               spiInit@sType 0076  
              ??_lcd_clear 0077          spiInit@sClockIdle 0074                ??_init_UART 0073  
             _slave_select 0037                   intlevel1 0000                  sprintf@ap 0057  
                sprintf@sp 005C           ___lwmod@dividend 004F                  stringcode 040A  
  __end_of_lcd_move_cursor 0478                   sprintf@c 005D                   sprintf@f 0051  
          ___lwmod@divisor 004D            ___lwmod@counter 0079                   stringdir 040A  
                 stringtab 0400           _lcd_write_string 032C             _lcd_write_char 0478  
